%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: hw2_4_1.pdf
%%Creator: Adobe Acrobat 11.0.4
%%For: Milannic
%%CreationDate: 2013/9/27, 10:24:40
%%BoundingBox: 135 411 567 476
%%HiResBoundingBox: 0 0 843 596.2500
%%CropBox: 0 0 843 596.2500
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 952 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2013-09-27T10:24:23-04:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2013-09-27T10:24:23-04:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Milannic Liu</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -596.25 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 596.25 li
843 596.25 li
843 0 li
cp
clp
gsave
0 596.25 mo
843 596.25 li
843 -.75 li
0 -.75 li
cp
clp
2.25 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
155.91 170.08 mo
552.76 170.08 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.749 sep
@
165.83 169.37 mo
165.83 166.63 168.05 164.41 170.79 164.41 cv
173.53 164.41 175.75 166.63 175.75 169.37 cv
175.75 169.37 li
175.75 172.11 173.53 174.33 170.79 174.33 cv
168.05 174.33 165.83 172.11 165.83 169.37 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.24 lw
165.83 169.37 mo
165.83 166.63 168.05 164.41 170.79 164.41 cv
173.53 164.41 175.75 166.63 175.75 169.37 cv
175.75 169.37 li
175.75 172.11 173.53 174.33 170.79 174.33 cv
168.05 174.33 165.83 172.11 165.83 169.37 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
207.64 170.08 mo
207.64 167.34 209.86 165.12 212.6 165.12 cv
215.34 165.12 217.56 167.34 217.56 170.08 cv
217.56 170.08 li
217.56 172.82 215.34 175.04 212.6 175.04 cv
209.86 175.04 207.64 172.82 207.64 170.08 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
207.64 170.08 mo
207.64 167.34 209.86 165.12 212.6 165.12 cv
215.34 165.12 217.56 167.34 217.56 170.08 cv
217.56 170.08 li
217.56 172.82 215.34 175.04 212.6 175.04 cv
209.86 175.04 207.64 172.82 207.64 170.08 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
249.45 170.08 mo
249.45 167.34 251.67 165.12 254.41 165.12 cv
257.15 165.12 259.37 167.34 259.37 170.08 cv
259.37 170.08 li
259.37 172.82 257.15 175.04 254.41 175.04 cv
251.67 175.04 249.45 172.82 249.45 170.08 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
249.45 170.08 mo
249.45 167.34 251.67 165.12 254.41 165.12 cv
257.15 165.12 259.37 167.34 259.37 170.08 cv
259.37 170.08 li
259.37 172.82 257.15 175.04 254.41 175.04 cv
251.67 175.04 249.45 172.82 249.45 170.08 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
289.13 170.08 mo
289.13 167.34 291.35 165.12 294.09 165.12 cv
296.83 165.12 299.06 167.34 299.06 170.08 cv
299.06 170.08 li
299.06 172.82 296.83 175.04 294.09 175.04 cv
291.35 175.04 289.13 172.82 289.13 170.08 cv
cp
/1 
[/DeviceCMYK] /CSA add_res
0 .990631 1 .000396735 cmyk
ef
289.13 170.08 mo
289.13 167.34 291.35 165.12 294.09 165.12 cv
296.83 165.12 299.06 167.34 299.06 170.08 cv
299.06 170.08 li
299.06 172.82 296.83 175.04 294.09 175.04 cv
291.35 175.04 289.13 172.82 289.13 170.08 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
330.94 170.79 mo
330.94 168.05 333.17 165.83 335.91 165.83 cv
338.65 165.83 340.87 168.05 340.87 170.79 cv
340.87 170.79 li
340.87 173.53 338.65 175.75 335.91 175.75 cv
333.17 175.75 330.94 173.53 330.94 170.79 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
330.94 170.79 mo
330.94 168.05 333.17 165.83 335.91 165.83 cv
338.65 165.83 340.87 168.05 340.87 170.79 cv
340.87 170.79 li
340.87 173.53 338.65 175.75 335.91 175.75 cv
333.17 175.75 330.94 173.53 330.94 170.79 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
372.76 170.79 mo
372.76 168.05 374.98 165.83 377.72 165.83 cv
380.46 165.83 382.68 168.05 382.68 170.79 cv
382.68 170.79 li
382.68 173.53 380.46 175.75 377.72 175.75 cv
374.98 175.75 372.76 173.53 372.76 170.79 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
372.76 170.79 mo
372.76 168.05 374.98 165.83 377.72 165.83 cv
380.46 165.83 382.68 168.05 382.68 170.79 cv
382.68 170.79 li
382.68 173.53 380.46 175.75 377.72 175.75 cv
374.98 175.75 372.76 173.53 372.76 170.79 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
411.02 169.72 mo
411.02 166.98 413.24 164.76 415.98 164.76 cv
418.72 164.76 420.94 166.98 420.94 169.72 cv
420.94 169.72 li
420.94 172.46 418.72 174.69 415.98 174.69 cv
413.24 174.69 411.02 172.46 411.02 169.72 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
411.02 169.72 mo
411.02 166.98 413.24 164.76 415.98 164.76 cv
418.72 164.76 420.94 166.98 420.94 169.72 cv
420.94 169.72 li
420.94 172.46 418.72 174.69 415.98 174.69 cv
413.24 174.69 411.02 172.46 411.02 169.72 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
452.83 170.43 mo
452.83 167.69 455.06 165.47 457.8 165.47 cv
460.53 165.47 462.76 167.69 462.76 170.43 cv
462.76 170.43 li
462.76 173.17 460.53 175.39 457.8 175.39 cv
455.06 175.39 452.83 173.17 452.83 170.43 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
452.83 170.43 mo
452.83 167.69 455.06 165.47 457.8 165.47 cv
460.53 165.47 462.76 167.69 462.76 170.43 cv
462.76 170.43 li
462.76 173.17 460.53 175.39 457.8 175.39 cv
455.06 175.39 452.83 173.17 452.83 170.43 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
494.65 170.43 mo
494.65 167.69 496.87 165.47 499.61 165.47 cv
502.35 165.47 504.57 167.69 504.57 170.43 cv
504.57 170.43 li
504.57 173.17 502.35 175.39 499.61 175.39 cv
496.87 175.39 494.65 173.17 494.65 170.43 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
494.65 170.43 mo
494.65 167.69 496.87 165.47 499.61 165.47 cv
502.35 165.47 504.57 167.69 504.57 170.43 cv
504.57 170.43 li
504.57 173.17 502.35 175.39 499.61 175.39 cv
496.87 175.39 494.65 173.17 494.65 170.43 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
527.95 169.72 mo
527.95 166.98 530.17 164.76 532.91 164.76 cv
535.65 164.76 537.87 166.98 537.87 169.72 cv
537.87 169.72 li
537.87 172.46 535.65 174.69 532.91 174.69 cv
530.17 174.69 527.95 172.46 527.95 169.72 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
527.95 169.72 mo
527.95 166.98 530.17 164.76 532.91 164.76 cv
535.65 164.76 537.87 166.98 537.87 169.72 cv
537.87 169.72 li
537.87 172.46 535.65 174.69 532.91 174.69 cv
530.17 174.69 527.95 172.46 527.95 169.72 cv
cp
1 /0 /CSD get_res sepcs
.749 sep
@
170.79 164.41 mo
171.26 160.75 174.2 157.9 177.87 157.56 cv
183.09 157.65 li
186.76 157.3 189.7 154.46 190.17 150.8 cv
190.52 154.47 193.36 157.41 197.02 157.88 cv
205.75 158.03 li
209.41 158.5 212.25 161.44 212.6 165.12 cv
@
212.6 165.12 mo
213.01 161.45 215.9 158.56 219.57 158.15 cv
224.78 158.15 li
228.45 157.74 231.34 154.85 231.75 151.18 cv
232.16 154.85 235.05 157.74 238.72 158.15 cv
247.44 158.15 li
251.11 158.56 254 161.45 254.41 165.12 cv
@
254.41 165.12 mo
254.8 161.64 257.54 158.89 261.02 158.5 cv
265.97 158.5 li
269.45 158.12 272.2 155.37 272.59 151.89 cv
272.97 155.37 275.72 158.12 279.2 158.5 cv
287.48 158.5 li
290.96 158.89 293.71 161.64 294.09 165.12 cv
@
295.51 166.57 mo
295.98 162.91 298.92 160.07 302.6 159.72 cv
307.81 159.81 li
311.49 159.46 314.43 156.62 314.9 152.96 cv
315.24 156.63 318.09 159.58 321.75 160.05 cv
330.47 160.19 li
334.13 160.66 336.98 163.61 337.32 167.28 cv
@
337.32 165.83 mo
337.73 162.16 340.62 159.27 344.29 158.86 cv
349.5 158.86 li
353.17 158.45 356.07 155.56 356.47 151.89 cv
356.88 155.56 359.77 158.45 363.44 158.86 cv
372.17 158.86 li
375.83 159.27 378.73 162.16 379.13 165.83 cv
@
377.72 165.83 mo
378.16 162.17 381.08 159.3 384.74 158.93 cv
389.95 158.98 li
393.62 158.6 396.54 155.74 396.98 152.08 cv
397.35 155.75 400.22 158.67 403.88 159.11 cv
412.59 159.19 li
416.25 159.63 419.12 162.55 419.49 166.22 cv
@
415.98 164.76 mo
416.45 161.1 419.4 158.26 423.07 157.91 cv
428.28 158 li
431.96 157.66 434.9 154.81 435.37 151.15 cv
435.72 154.82 438.56 157.77 442.22 158.24 cv
450.94 158.39 li
454.6 158.86 457.45 161.8 457.8 165.47 cv
@
457.8 164.76 mo
458.26 161.1 461.21 158.26 464.88 157.91 cv
470.09 158 li
473.77 157.66 476.71 154.81 477.18 151.15 cv
477.53 154.82 480.37 157.77 484.03 158.24 cv
492.76 158.39 li
496.42 158.86 499.26 161.8 499.61 165.47 cv
@
499.61 165.47 mo
500.03 162.25 502.63 159.75 505.87 159.46 cv
510.46 159.55 li
513.69 159.26 516.29 156.76 516.72 153.54 cv
517.01 156.78 519.51 159.38 522.73 159.8 cv
530.41 159.96 li
533.63 160.38 536.13 162.98 536.42 166.22 cv
@
0 .990631 1 .000396735 cmyk
%ADOBeginSubsetFont: LJDIOO+#cb#ce#cc#e5-GBK-EUC-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin
18 dict begin
/CIDFontName /LJDIOO+#cb#ce#cc#e5-GBK-EUC-H def
/PaintType 0 def
/FontType 42 def
/CIDFontType 2 def
/GDBytes 2 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [-0.008 -0.145 1 0.859] def
/CIDCount 28762 def
/CDevProc {pop pop pop pop pop 0 -1 7 index 2 div .88}bind def
/CharStrings 1 dict dup begin /.notdef 0 def end def
/Encoding 1 array dup 0 /.notdef put readonly def
/CIDMap [
<0000000100020003000400050006000700080009000a000b000c000d000e
000f0010001100120013001400150016001700180019001a001b001c001d
001e001f0020002100220023002400250026002700280029002a002b002c
002d002e002f0030003100320033003400350036003700380039003a003b
003c003d003e003f0040004100420043004400450046004700480049004a
004b004c004d004e004f0050005100520053005400550056005700580059
005a005b005c005d005e005f006000610062006300640065006600670068
0069006a006b006c006d006e006f00700071007200730074007500760077
00780079007a007b007c007d007e007f0080008100820083008400850086
008700880089008a008b008c008d008e008f009000910092009300940095
0096009700980099009a009b009c009d009e009f00a000a100a200a300a4
00a500a600a700a800a900aa00ab00ac00ad00ae00af00b000b100b200b3
00b400b500b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c2
00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d1
00d200d300d400d500d600d700d800d900da00db00dc00dd00de00df00e0
00e100e200e300e400e500e600e700e800e900ea00eb00ec00ed00ee00ef
00f000f100f200f300f400f500f600f700f800f900fa00fb00fc00fd00fe
00ff0100010101020103010401050106010701080109010a010b010c010d
010e010f0110011101120113011401150116011701180119011a011b011c
011d011e011f0120012101220123012401250126012701280129012a012b
012c012d012e012f0130013101320133013401350136013701380139013a
013b013c013d013e013f0140014101420143014401450146014701480149
014a014b014c014d014e014f015001510152015301540155015601570158
0159015a015b015c015d015e015f01600161016201630164016501660167
01680169016a016b016c016d016e016f0170017101720173017401750176
017701780179017a017b017c017d017e017f018001810182018301840185
0186018701880189018a018b018c018d018e018f01900191019201930194
01950196019701980199019a019b019c019d019e019f01a001a101a201a3
01a401a501a601a701a801a901aa01ab01ac01ad01ae01af01b001b101b2
01b301b401b501b601b701b801b901ba01bb01bc01bd01be01bf01c001c1
01c201c301c401c501c601c701c801c901ca01cb01cc01cd01ce01cf01d0
01d101d201d301d401d501d601d701d801d901da01db01dc01dd01de01df
01e001e101e201e301e401e501e601e701e801e901ea01eb01ec01ed01ee
01ef01f001f101f201f301f401f501f601f701f801f901fa01fb01fc01fd
01fe01ff0200020102020203020402050206020702080209020a020b020c
020d020e020f0210021102120213021402150216021702180219021a021b
021c021d021e021f0220022102220223022402250226022702280229022a
022b022c022d022e022f0230023102320233023402350236023702380239
023a023b023c023d023e023f024002410242024302440245024602470248
0249024a024b024c024d024e024f02500251025202530254025502560257
02580259025a025b025c025d025e025f0260026102620263026402650266
026702680269026a026b026c026d026e026f027002710272027302740275
0276027702780279027a027b027c027d027e027f02800281028202830284
02850286028702880289028a028b028c028d028e028f0290029102920293
029402950296029702980299029a029b029c029d029e029f02a002a102a2
02a302a402a502a602a702a802a902aa02ab02ac02ad02ae02af02b002b1
02b202b302b402b502b602b702b802b902ba02bb02bc02bd02be02bf02c0
02c102c202c302c402c502c602c702c802c902ca02cb02cc02cd02ce02cf
02d002d102d202d302d402d502d602d702d802d902da02db02dc02dd02de
02df02e002e102e202e302e402e502e602e702e802e902ea02eb02ec02ed
02ee02ef02f002f102f202f302f402f502f602f702f802f902fa02fb02fc
02fd02fe02ff0300030103020303030403050306030703080309030a030b
030c030d030e030f0310031103120313031403150316031703180319031a
031b031c031d031e031f0320032103220323032403250326032703280329
032a032b032c032d032e032f033003310332033303340335033603370338
0339033a033b033c033d033e033f03400341034203430344034503460347
03480349034a034b034c034d034e034f0350035103520353035403550356
035703580359035a035b035c035d035e035f036003610362036303640365
0366036703680369036a036b036c036d036e036f03700371037203730374
03750376037703780379037a037b037c037d037e037f0380038103820383
038403850386038703880389038a038b038c038d038e038f039003910392
0393039403950396039703980399039a039b039c039d039e039f03a003a1
03a203a303a403a503a603a703a803a903aa03ab03ac03ad03ae03af03b0
03b103b203b303b403b503b603b703b803b903ba03bb03bc03bd03be03bf
03c003c103c203c303c403c503c603c703c803c903ca03cb03cc03cd03ce
03cf03d003d103d203d303d403d503d603d703d803d903da03db03dc03dd
03de03df03e003e103e203e303e403e503e603e703e803e903ea03eb03ec
03ed03ee03ef03f003f103f203f303f403f503f603f703f803f903fa03fb
03fc03fd03fe03ff0400040104020403040404050406040704080409040a
040b040c040d040e040f0410041104120413041404150416041704180419
041a041b041c041d041e041f042004210422042304240425042604270428
0429042a042b042c042d042e042f04300431043204330434043504360437
04380439043a043b043c043d043e043f0440044104420443044404450446
044704480449044a044b044c044d044e044f045004510452045304540455
0456045704580459045a045b045c045d045e045f04600461046204630464
04650466046704680469046a046b046c046d046e046f0470047104720473
047404750476047704780479047a047b047c047d047e047f048004810482
0483048404850486048704880489048a048b048c048d048e048f04900491
04920493049404950496049704980499049a049b049c049d049e049f04a0
04a104a204a304a404a504a604a704a804a904aa04ab04ac04ad04ae04af
04b004b104b204b304b404b504b604b704b804b904ba04bb04bc04bd04be
04bf04c004c104c204c304c404c504c604c704c804c904ca04cb04cc04cd
04ce04cf04d004d104d204d304d404d504d604d704d804d904da04db04dc
04dd04de04df04e004e104e204e304e404e504e604e704e804e904ea04eb
04ec04ed04ee04ef04f004f104f204f304f404f504f604f704f804f904fa
04fb04fc04fd04fe04ff0500050105020503050405050506050705080509
050a050b050c050d050e050f051005110512051305140515051605170518
0519051a051b051c051d051e051f05200521052205230524052505260527
05280529052a052b052c052d052e052f0530053105320533053405350536
053705380539053a053b053c053d053e053f054005410542054305440545
0546054705480549054a054b054c054d054e054f05500551055205530554
05550556055705580559055a055b055c055d055e055f0560056105620563
056405650566056705680569056a056b056c056d056e056f057005710572
0573057405750576057705780579057a057b057c057d057e057f05800581
05820583058405850586058705880589058a058b058c058d058e058f0590
059105920593059405950596059705980599059a059b059c059d059e059f
05a005a105a205a305a405a505a605a705a805a905aa05ab05ac05ad05ae
05af05b005b105b205b305b405b505b605b705b805b905ba05bb05bc05bd
05be05bf05c005c105c205c305c405c505c605c705c805c905ca05cb05cc
05cd05ce05cf05d005d105d205d305d405d505d605d705d805d905da05db
05dc05dd05de05df05e005e105e205e305e405e505e605e705e805e905ea
05eb05ec05ed05ee05ef05f005f105f205f305f405f505f605f705f805f9
05fa05fb05fc05fd05fe05ff060006010602060306040605060606070608
0609060a060b060c060d060e060f06100611061206130614061506160617
06180619061a061b061c061d061e061f0620062106220623062406250626
062706280629062a062b062c062d062e062f063006310632063306340635
0636063706380639063a063b063c063d063e063f06400641064206430644
06450646064706480649064a064b064c064d064e064f0650065106520653
065406550656065706580659065a065b065c065d065e065f066006610662
0663066406650666066706680669066a066b066c066d066e066f06700671
06720673067406750676067706780679067a067b067c067d067e067f0680
068106820683068406850686068706880689068a068b068c068d068e068f
0690069106920693069406950696069706980699069a069b069c069d069e
069f06a006a106a206a306a406a506a606a706a806a906aa06ab06ac06ad
06ae06af06b006b106b206b306b406b506b606b706b806b906ba06bb06bc
06bd06be06bf06c006c106c206c306c406c506c606c706c806c906ca06cb
06cc06cd06ce06cf06d006d106d206d306d406d506d606d706d806d906da
06db06dc06dd06de06df06e006e106e206e306e406e506e606e706e806e9
06ea06eb06ec06ed06ee06ef06f006f106f206f306f406f506f606f706f8
06f906fa06fb06fc06fd06fe06ff07000701070207030704070507060707
07080709070a070b070c070d070e070f0710071107120713071407150716
071707180719071a071b071c071d071e071f072007210722072307240725
0726072707280729072a072b072c072d072e072f07300731073207330734
07350736073707380739073a073b073c073d073e073f0740074107420743
074407450746074707480749074a074b074c074d074e074f075007510752
0753075407550756075707580759075a075b075c075d075e075f07600761
07620763076407650766076707680769076a076b076c076d076e076f0770
077107720773077407750776077707780779077a077b077c077d077e077f
0780078107820783078407850786078707880789078a078b078c078d078e
078f0790079107920793079407950796079707980799079a079b079c079d
079e079f07a007a107a207a307a407a507a607a707a807a907aa07ab07ac
07ad07ae07af07b007b107b207b307b407b507b607b707b807b907ba07bb
07bc07bd07be07bf07c007c107c207c307c407c507c607c707c807c907ca
07cb07cc07cd07ce07cf07d007d107d207d307d407d507d607d707d807d9
07da07db07dc07dd07de07df07e007e107e207e307e407e507e607e707e8
07e907ea07eb07ec07ed07ee07ef07f007f107f207f307f407f507f607f7
07f807f907fa07fb07fc07fd07fe07ff0800080108020803080408050806
080708080809080a080b080c080d080e080f081008110812081308140815
0816081708180819081a081b081c081d081e081f08200821082208230824
08250826082708280829082a082b082c082d082e082f0830083108320833
083408350836083708380839083a083b083c083d083e083f084008410842
0843084408450846084708480849084a084b084c084d084e084f08500851
08520853085408550856085708580859085a085b085c085d085e085f0860
086108620863086408650866086708680869086a086b086c086d086e086f
0870087108720873087408750876087708780879087a087b087c087d087e
087f0880088108820883088408850886088708880889088a088b088c088d
088e088f0890089108920893089408950896089708980899089a089b089c
089d089e089f08a008a108a208a308a408a508a608a708a808a908aa08ab
08ac08ad08ae08af08b008b108b208b308b408b508b608b708b808b908ba
08bb08bc08bd08be08bf08c008c108c208c308c408c508c608c708c808c9
08ca08cb08cc08cd08ce08cf08d008d108d208d308d408d508d608d708d8
08d908da08db08dc08dd08de08df08e008e108e208e308e408e508e608e7
08e808e908ea08eb08ec08ed08ee08ef08f008f108f208f308f408f508f6
08f708f808f908fa08fb08fc08fd08fe08ff090009010902090309040905
0906090709080909090a090b090c090d090e090f09100911091209130914
09150916091709180919091a091b091c091d091e091f0920092109220923
092409250926092709280929092a092b092c092d092e092f093009310932
0933093409350936093709380939093a093b093c093d093e093f09400941
09420943094409450946094709480949094a094b094c094d094e094f0950
095109520953095409550956095709580959095a095b095c095d095e095f
0960096109620963096409650966096709680969096a096b096c096d096e
096f0970097109720973097409750976097709780979097a097b097c097d
097e097f0980098109820983098409850986098709880989098a098b098c
098d098e098f0990099109920993099409950996099709980999099a099b
099c099d099e099f09a009a109a209a309a409a509a609a709a809a909aa
09ab09ac09ad09ae09af09b009b109b209b309b409b509b609b709b809b9
09ba09bb09bc09bd09be09bf09c009c109c209c309c409c509c609c709c8
09c909ca09cb09cc09cd09ce09cf09d009d109d209d309d409d509d609d7
09d809d909da09db09dc09dd09de09df09e009e109e209e309e409e509e6
09e709e809e909ea09eb09ec09ed09ee09ef09f009f109f209f309f409f5
09f609f709f809f909fa09fb09fc09fd09fe09ff0a000a010a020a030a04
0a050a060a070a080a090a0a0a0b0a0c0a0d0a0e0a0f0a100a110a120a13
0a140a150a160a170a180a190a1a0a1b0a1c0a1d0a1e0a1f0a200a210a22
0a230a240a250a260a270a280a290a2a0a2b0a2c0a2d0a2e0a2f0a300a31
0a320a330a340a350a360a370a380a390a3a0a3b0a3c0a3d0a3e0a3f0a40
0a410a420a430a440a450a460a470a480a490a4a0a4b0a4c0a4d0a4e0a4f
0a500a510a520a530a540a550a560a570a580a590a5a0a5b0a5c0a5d0a5e
0a5f0a600a610a620a630a640a650a660a670a680a690a6a0a6b0a6c0a6d
0a6e0a6f0a700a710a720a730a740a750a760a770a780a790a7a0a7b0a7c
0a7d0a7e0a7f0a800a810a820a830a840a850a860a870a880a890a8a0a8b
0a8c0a8d0a8e0a8f0a900a910a920a930a940a950a960a970a980a990a9a
0a9b0a9c0a9d0a9e0a9f0aa00aa10aa20aa30aa40aa50aa60aa70aa80aa9
0aaa0aab0aac0aad0aae0aaf0ab00ab10ab20ab30ab40ab50ab60ab70ab8
0ab90aba0abb0abc0abd0abe0abf0ac00ac10ac20ac30ac40ac50ac60ac7
0ac80ac90aca0acb0acc0acd0ace0acf0ad00ad10ad20ad30ad40ad50ad6
0ad70ad80ad90ada0adb0adc0add0ade0adf0ae00ae10ae20ae30ae40ae5
0ae60ae70ae80ae90aea0aeb0aec0aed0aee0aef0af00af10af20af30af4
0af50af60af70af80af90afa0afb0afc0afd0afe0aff0b000b010b020b03
0b040b050b060b070b080b090b0a0b0b0b0c0b0d0b0e0b0f0b100b110b12
0b130b140b150b160b170b180b190b1a0b1b0b1c0b1d0b1e0b1f0b200b21
0b220b230b240b250b260b270b280b290b2a0b2b0b2c0b2d0b2e0b2f0b30
0b310b320b330b340b350b360b370b380b390b3a0b3b0b3c0b3d0b3e0b3f
0b400b410b420b430b440b450b460b470b480b490b4a0b4b0b4c0b4d0b4e
0b4f0b500b510b520b530b540b550b560b570b580b590b5a0b5b0b5c0b5d
0b5e0b5f0b600b610b620b630b640b650b660b670b680b690b6a0b6b0b6c
0b6d0b6e0b6f0b700b710b720b730b740b750b760b770b780b790b7a0b7b
0b7c0b7d0b7e0b7f0b800b810b820b830b840b850b860b870b880b890b8a
0b8b0b8c0b8d0b8e0b8f0b900b910b920b930b940b950b960b970b980b99
0b9a0b9b0b9c0b9d0b9e0b9f0ba00ba10ba20ba30ba40ba50ba60ba70ba8
0ba90baa0bab0bac0bad0bae0baf0bb00bb10bb20bb30bb40bb50bb60bb7
0bb80bb90bba0bbb0bbc0bbd0bbe0bbf0bc00bc10bc20bc30bc40bc50bc6
0bc70bc80bc90bca0bcb0bcc0bcd0bce0bcf0bd00bd10bd20bd30bd40bd5
0bd60bd70bd80bd90bda0bdb0bdc0bdd0bde0bdf0be00be10be20be30be4
0be50be60be70be80be90bea0beb0bec0bed0bee0bef0bf00bf10bf20bf3
0bf40bf50bf60bf70bf80bf90bfa0bfb0bfc0bfd0bfe0bff0c000c010c02
0c030c040c050c060c070c080c090c0a0c0b0c0c0c0d0c0e0c0f0c100c11
0c120c130c140c150c160c170c180c190c1a0c1b0c1c0c1d0c1e0c1f0c20
0c210c220c230c240c250c260c270c280c290c2a0c2b0c2c0c2d0c2e0c2f
0c300c310c320c330c340c350c360c370c380c390c3a0c3b0c3c0c3d0c3e
0c3f0c400c410c420c430c440c450c460c470c480c490c4a0c4b0c4c0c4d
0c4e0c4f0c500c510c520c530c540c550c560c570c580c590c5a0c5b0c5c
0c5d0c5e0c5f0c600c610c620c630c640c650c660c670c680c690c6a0c6b
0c6c0c6d0c6e0c6f0c700c710c720c730c740c750c760c770c780c790c7a
0c7b0c7c0c7d0c7e0c7f0c800c810c820c830c840c850c860c870c880c89
0c8a0c8b0c8c0c8d0c8e0c8f0c900c910c920c930c940c950c960c970c98
0c990c9a0c9b0c9c0c9d0c9e0c9f0ca00ca10ca20ca30ca40ca50ca60ca7
0ca80ca90caa0cab0cac0cad0cae0caf0cb00cb10cb20cb30cb40cb50cb6
0cb70cb80cb90cba0cbb0cbc0cbd0cbe0cbf0cc00cc10cc20cc30cc40cc5
0cc60cc70cc80cc90cca0ccb0ccc0ccd0cce0ccf0cd00cd10cd20cd30cd4
0cd50cd60cd70cd80cd90cda0cdb0cdc0cdd0cde0cdf0ce00ce10ce20ce3
0ce40ce50ce60ce70ce80ce90cea0ceb0cec0ced0cee0cef0cf00cf10cf2
0cf30cf40cf50cf60cf70cf80cf90cfa0cfb0cfc0cfd0cfe0cff0d000d01
0d020d030d040d050d060d070d080d090d0a0d0b0d0c0d0d0d0e0d0f0d10
0d110d120d130d140d150d160d170d180d190d1a0d1b0d1c0d1d0d1e0d1f
0d200d210d220d230d240d250d260d270d280d290d2a0d2b0d2c0d2d0d2e
0d2f0d300d310d320d330d340d350d360d370d380d390d3a0d3b0d3c0d3d
0d3e0d3f0d400d410d420d430d440d450d460d470d480d490d4a0d4b0d4c
0d4d0d4e0d4f0d500d510d520d530d540d550d560d570d580d590d5a0d5b
0d5c0d5d0d5e0d5f0d600d610d620d630d640d650d660d670d680d690d6a
0d6b0d6c0d6d0d6e0d6f0d700d710d720d730d740d750d760d770d780d79
0d7a0d7b0d7c0d7d0d7e0d7f0d800d810d820d830d840d850d860d870d88
0d890d8a0d8b0d8c0d8d0d8e0d8f0d900d910d920d930d940d950d960d97
0d980d990d9a0d9b0d9c0d9d0d9e0d9f0da00da10da20da30da40da50da6
0da70da80da90daa0dab0dac0dad0dae0daf0db00db10db20db30db40db5
0db60db70db80db90dba0dbb0dbc0dbd0dbe0dbf0dc00dc10dc20dc30dc4
0dc50dc60dc70dc80dc90dca0dcb0dcc0dcd0dce0dcf0dd00dd10dd20dd3
0dd40dd50dd60dd70dd80dd90dda0ddb0ddc0ddd0dde0ddf0de00de10de2
0de30de40de50de60de70de80de90dea0deb0dec0ded0dee0def0df00df1
0df20df30df40df50df60df70df80df90dfa0dfb0dfc0dfd0dfe0dff0e00
0e010e020e030e040e050e060e070e080e090e0a0e0b0e0c0e0d0e0e0e0f
0e100e110e120e130e140e150e160e170e180e190e1a0e1b0e1c0e1d0e1e
0e1f0e200e210e220e230e240e250e260e270e280e290e2a0e2b0e2c0e2d
0e2e0e2f0e300e310e320e330e340e350e360e370e380e390e3a0e3b0e3c
0e3d0e3e0e3f0e400e410e420e430e440e450e460e470e480e490e4a0e4b
0e4c0e4d0e4e0e4f0e500e510e520e530e540e550e560e570e580e590e5a
0e5b0e5c0e5d0e5e0e5f0e600e610e620e630e640e650e660e670e680e69
0e6a0e6b0e6c0e6d0e6e0e6f0e700e710e720e730e740e750e760e770e78
0e790e7a0e7b0e7c0e7d0e7e0e7f0e800e810e820e830e840e850e860e87
0e880e890e8a0e8b0e8c0e8d0e8e0e8f0e900e910e920e930e940e950e96
0e970e980e990e9a0e9b0e9c0e9d0e9e0e9f0ea00ea10ea20ea30ea40ea5
0ea60ea70ea80ea90eaa0eab0eac0ead0eae0eaf0eb00eb10eb20eb30eb4
0eb50eb60eb70eb80eb90eba0ebb0ebc0ebd0ebe0ebf0ec00ec10ec20ec3
0ec40ec50ec60ec70ec80ec90eca0ecb0ecc0ecd0ece0ecf0ed00ed10ed2
0ed30ed40ed50ed60ed70ed80ed90eda0edb0edc0edd0ede0edf0ee00ee1
0ee20ee30ee40ee50ee60ee70ee80ee90eea0eeb0eec0eed0eee0eef0ef0
0ef10ef20ef30ef40ef50ef60ef70ef80ef90efa0efb0efc0efd0efe0eff
0f000f010f020f030f040f050f060f070f080f090f0a0f0b0f0c0f0d0f0e
0f0f0f100f110f120f130f140f150f160f170f180f190f1a0f1b0f1c0f1d
0f1e0f1f0f200f210f220f230f240f250f260f270f280f290f2a0f2b0f2c
0f2d0f2e0f2f0f300f310f320f330f340f350f360f370f380f390f3a0f3b
0f3c0f3d0f3e0f3f0f400f410f420f430f440f450f460f470f480f490f4a
0f4b0f4c0f4d0f4e0f4f0f500f510f520f530f540f550f560f570f580f59
0f5a0f5b0f5c0f5d0f5e0f5f0f600f610f620f630f640f650f660f670f68
0f690f6a0f6b0f6c0f6d0f6e0f6f0f700f710f720f730f740f750f760f77
0f780f790f7a0f7b0f7c0f7d0f7e0f7f0f800f810f820f830f840f850f86
0f870f880f890f8a0f8b0f8c0f8d0f8e0f8f0f900f910f920f930f940f95
0f960f970f980f990f9a0f9b0f9c0f9d0f9e0f9f0fa00fa10fa20fa30fa4
0fa50fa60fa70fa80fa90faa0fab0fac0fad0fae0faf0fb00fb10fb20fb3
0fb40fb50fb60fb70fb80fb90fba0fbb0fbc0fbd0fbe0fbf0fc00fc10fc2
0fc30fc40fc50fc60fc70fc80fc90fca0fcb0fcc0fcd0fce0fcf0fd00fd1
0fd20fd30fd40fd50fd60fd70fd80fd90fda0fdb0fdc0fdd0fde0fdf0fe0
0fe10fe20fe30fe40fe50fe60fe70fe80fe90fea0feb0fec0fed0fee0fef
0ff00ff10ff20ff30ff40ff50ff60ff70ff80ff90ffa0ffb0ffc0ffd0ffe
0fff1000100110021003100410051006100710081009100a100b100c100d
100e100f1010101110121013101410151016101710181019101a101b101c
101d101e101f1020102110221023102410251026102710281029102a102b
102c102d102e102f1030103110321033103410351036103710381039103a
103b103c103d103e103f1040104110421043104410451046104710481049
104a104b104c104d104e104f105010511052105310541055105610571058
1059105a105b105c105d105e105f10601061106210631064106510661067
10681069106a106b106c106d106e106f1070107110721073107410751076
107710781079107a107b107c107d107e107f108010811082108310841085
1086108710881089108a108b108c108d108e108f10901091109210931094
10951096109710981099109a109b109c109d109e109f10a010a110a210a3
10a410a510a610a710a810a910aa10ab10ac10ad10ae10af10b010b110b2
10b310b410b510b610b710b810b910ba10bb10bc10bd10be10bf10c010c1
10c210c310c410c510c610c710c810c910ca10cb10cc10cd10ce10cf10d0
10d110d210d310d410d510d610d710d810d910da10db10dc10dd10de10df
10e010e110e210e310e410e510e610e710e810e910ea10eb10ec10ed10ee
10ef10f010f110f210f310f410f510f610f710f810f910fa10fb10fc10fd
10fe10ff1100110111021103110411051106110711081109110a110b110c
110d110e110f1110111111121113111411151116111711181119111a111b
111c111d111e111f1120112111221123112411251126112711281129112a
112b112c112d112e112f1130113111321133113411351136113711381139
113a113b113c113d113e113f114011411142114311441145114611471148
1149114a114b114c114d114e114f11501151115211531154115511561157
11581159115a115b115c115d115e115f1160116111621163116411651166
116711681169116a116b116c116d116e116f117011711172117311741175
1176117711781179117a117b117c117d117e117f11801181118211831184
11851186118711881189118a118b118c118d118e118f1190119111921193
119411951196119711981199119a119b119c119d119e119f11a011a111a2
11a311a411a511a611a711a811a911aa11ab11ac11ad11ae11af11b011b1
11b211b311b411b511b611b711b811b911ba11bb11bc11bd11be11bf11c0
11c111c211c311c411c511c611c711c811c911ca11cb11cc11cd11ce11cf
11d011d111d211d311d411d511d611d711d811d911da11db11dc11dd11de
11df11e011e111e211e311e411e511e611e711e811e911ea11eb11ec11ed
11ee11ef11f011f111f211f311f411f511f611f711f811f911fa11fb11fc
11fd11fe11ff1200120112021203120412051206120712081209120a120b
120c120d120e120f1210121112121213121412151216121712181219121a
121b121c121d121e121f1220122112221223122412251226122712281229
122a122b122c122d122e122f123012311232123312341235123612371238
1239123a123b123c123d123e123f12401241124212431244124512461247
12481249124a124b124c124d124e124f1250125112521253125412551256
125712581259125a125b125c125d125e125f126012611262126312641265
1266126712681269126a126b126c126d126e126f12701271127212731274
12751276127712781279127a127b127c127d127e127f1280128112821283
128412851286128712881289128a128b128c128d128e128f129012911292
1293129412951296129712981299129a129b129c129d129e129f12a012a1
12a212a312a412a512a612a712a812a912aa12ab12ac12ad12ae12af12b0
12b112b212b312b412b512b612b712b812b912ba12bb12bc12bd12be12bf
12c012c112c212c312c412c512c612c712c812c912ca12cb12cc12cd12ce
12cf12d012d112d212d312d412d512d612d712d812d912da12db12dc12dd
12de12df12e012e112e212e312e412e512e612e712e812e912ea12eb12ec
12ed12ee12ef12f012f112f212f312f412f512f612f712f812f912fa12fb
12fc12fd12fe12ff1300130113021303130413051306130713081309130a
130b130c130d130e130f1310131113121313131413151316131713181319
131a131b131c131d131e131f132013211322132313241325132613271328
1329132a132b132c132d132e132f13301331133213331334133513361337
13381339133a133b133c133d133e133f1340134113421343134413451346
134713481349134a134b134c134d134e134f135013511352135313541355
1356135713581359135a135b135c135d135e135f13601361136213631364
13651366136713681369136a136b136c136d136e136f1370137113721373
137413751376137713781379137a137b137c137d137e137f138013811382
1383138413851386138713881389138a138b138c138d138e138f13901391
13921393139413951396139713981399139a139b139c139d139e139f13a0
13a113a213a313a413a513a613a713a813a913aa13ab13ac13ad13ae13af
13b013b113b213b313b413b513b613b713b813b913ba13bb13bc13bd13be
13bf13c013c113c213c313c413c513c613c713c813c913ca13cb13cc13cd
13ce13cf13d013d113d213d313d413d513d613d713d813d913da13db13dc
13dd13de13df13e013e113e213e313e413e513e613e713e813e913ea13eb
13ec13ed13ee13ef13f013f113f213f313f413f513f613f713f813f913fa
13fb13fc13fd13fe13ff1400140114021403140414051406140714081409
140a140b140c140d140e140f141014111412141314141415141614171418
1419141a141b141c141d141e141f14201421142214231424142514261427
14281429142a142b142c142d142e142f1430143114321433143414351436
143714381439143a143b143c143d143e143f144014411442144314441445
1446144714481449144a144b144c144d144e144f14501451145214531454
14551456145714581459145a145b145c145d145e145f1460146114621463
146414651466146714681469146a146b146c146d146e146f147014711472
1473147414751476147714781479147a147b147c147d147e147f14801481
14821483148414851486148714881489148a148b148c148d148e148f1490
149114921493149414951496149714981499149a149b149c149d149e149f
14a014a114a214a314a414a514a614a714a814a914aa14ab14ac14ad14ae
14af14b014b114b214b314b414b514b614b714b814b914ba14bb14bc14bd
14be14bf14c014c114c214c314c414c514c614c714c814c914ca14cb14cc
14cd14ce14cf14d014d114d214d314d414d514d614d714d814d914da14db
14dc14dd14de14df14e014e114e214e314e414e514e614e714e814e914ea
14eb14ec14ed14ee14ef14f014f114f214f314f414f514f614f714f814f9
14fa14fb14fc14fd14fe14ff150015011502150315041505150615071508
1509150a150b150c150d150e150f15101511151215131514151515161517
15181519151a151b151c151d151e151f1520152115221523152415251526
152715281529152a152b152c152d152e152f153015311532153315341535
1536153715381539153a153b153c153d153e153f15401541154215431544
15451546154715481549154a154b154c154d154e154f1550155115521553
155415551556155715581559155a155b155c155d155e155f156015611562
1563156415651566156715681569156a156b156c156d156e156f15701571
15721573157415751576157715781579157a157b157c157d157e157f1580
158115821583158415851586158715881589158a158b158c158d158e158f
1590159115921593159415951596159715981599159a159b159c159d159e
159f15a015a115a215a315a415a515a615a715a815a915aa15ab15ac15ad
15ae15af15b015b115b215b315b415b515b615b715b815b915ba15bb15bc
15bd15be15bf15c015c115c215c315c415c515c615c715c815c915ca15cb
15cc15cd15ce15cf15d015d115d215d315d415d515d615d715d815d915da
15db15dc15dd15de15df15e015e115e215e315e415e515e615e715e815e9
15ea15eb15ec15ed15ee15ef15f015f115f215f315f415f515f615f715f8
15f915fa15fb15fc15fd15fe15ff16001601160216031604160516061607
16081609160a160b160c160d160e160f1610161116121613161416151616
161716181619161a161b161c161d161e161f162016211622162316241625
1626162716281629162a162b162c162d162e162f16301631163216331634
16351636163716381639163a163b163c163d163e163f1640164116421643
164416451646164716481649164a164b164c164d164e164f165016511652
1653165416551656165716581659165a165b165c165d165e165f16601661
16621663166416651666166716681669166a166b166c166d166e166f1670
167116721673167416751676167716781679167a167b167c167d167e167f
1680168116821683168416851686168716881689168a168b168c168d168e
168f1690169116921693169416951696169716981699169a169b169c169d
169e169f16a016a116a216a316a416a516a616a716a816a916aa16ab16ac
16ad16ae16af16b016b116b216b316b416b516b616b716b816b916ba16bb
16bc16bd16be16bf16c016c116c216c316c416c516c616c716c816c916ca
16cb16cc16cd16ce16cf16d016d116d216d316d416d516d616d716d816d9
16da16db16dc16dd16de16df16e016e116e216e316e416e516e616e716e8
16e916ea16eb16ec16ed16ee16ef16f016f116f216f316f416f516f616f7
16f816f916fa16fb16fc16fd16fe16ff1700170117021703170417051706
170717081709170a170b170c170d170e170f171017111712171317141715
1716171717181719171a171b171c171d171e171f17201721172217231724
17251726172717281729172a172b172c172d172e172f1730173117321733
173417351736173717381739173a173b173c173d173e173f174017411742
1743174417451746174717481749174a174b174c174d174e174f17501751
17521753175417551756175717581759175a175b175c175d175e175f1760
176117621763176417651766176717681769176a176b176c176d176e176f
1770177117721773177417751776177717781779177a177b177c177d177e
177f1780178117821783178417851786178717881789178a178b178c178d
178e178f1790179117921793179417951796179717981799179a179b179c
179d179e179f17a017a117a217a317a417a517a617a717a817a917aa17ab
17ac17ad17ae17af17b017b117b217b317b417b517b617b717b817b917ba
17bb17bc17bd17be17bf17c017c117c217c317c417c517c617c717c817c9
17ca17cb17cc17cd17ce17cf17d017d117d217d317d417d517d617d717d8
17d917da17db17dc17dd17de17df17e017e117e217e317e417e517e617e7
17e817e917ea17eb17ec17ed17ee17ef17f017f117f217f317f417f517f6
17f717f817f917fa17fb17fc17fd17fe17ff180018011802180318041805
1806180718081809180a180b180c180d180e180f18101811181218131814
18151816181718181819181a181b181c181d181e181f1820182118221823
182418251826182718281829182a182b182c182d182e182f183018311832
1833183418351836183718381839183a183b183c183d183e183f18401841
18421843184418451846184718481849184a184b184c184d184e184f1850
185118521853185418551856185718581859185a185b185c185d185e185f
1860186118621863186418651866186718681869186a186b186c186d186e
186f1870187118721873187418751876187718781879187a187b187c187d
187e187f1880188118821883188418851886188718881889188a188b188c
188d188e188f1890189118921893189418951896189718981899189a189b
189c189d189e189f18a018a118a218a318a418a518a618a718a818a918aa
18ab18ac18ad18ae18af18b018b118b218b318b418b518b618b718b818b9
18ba18bb18bc18bd18be18bf18c018c118c218c318c418c518c618c718c8
18c918ca18cb18cc18cd18ce18cf18d018d118d218d318d418d518d618d7
18d818d918da18db18dc18dd18de18df18e018e118e218e318e418e518e6
18e718e818e918ea18eb18ec18ed18ee18ef18f018f118f218f318f418f5
18f618f718f818f918fa18fb18fc18fd18fe18ff19001901190219031904
19051906190719081909190a190b190c190d190e190f1910191119121913
191419151916191719181919191a191b191c191d191e191f192019211922
1923192419251926192719281929192a192b192c192d192e192f19301931
19321933193419351936193719381939193a193b193c193d193e193f1940
194119421943194419451946194719481949194a194b194c194d194e194f
1950195119521953195419551956195719581959195a195b195c195d195e
195f1960196119621963196419651966196719681969196a196b196c196d
196e196f1970197119721973197419751976197719781979197a197b197c
197d197e197f1980198119821983198419851986198719881989198a198b
198c198d198e198f1990199119921993199419951996199719981999199a
199b199c199d199e199f19a019a119a219a319a419a519a619a719a819a9
19aa19ab19ac19ad19ae19af19b019b119b219b319b419b519b619b719b8
19b919ba19bb19bc19bd19be19bf19c019c119c219c319c419c519c619c7
19c819c919ca19cb19cc19cd19ce19cf19d019d119d219d319d419d519d6
19d719d819d919da19db19dc19dd19de19df19e019e119e219e319e419e5
19e619e719e819e919ea19eb19ec19ed19ee19ef19f019f119f219f319f4
19f519f619f719f819f919fa19fb19fc19fd19fe19ff1a001a011a021a03
1a041a051a061a071a081a091a0a1a0b1a0c1a0d1a0e1a0f1a101a111a12
1a131a141a151a161a171a181a191a1a1a1b1a1c1a1d1a1e1a1f1a201a21
1a221a231a241a251a261a271a281a291a2a1a2b1a2c1a2d1a2e1a2f1a30
1a311a321a331a341a351a361a371a381a391a3a1a3b1a3c1a3d1a3e1a3f
1a401a411a421a431a441a451a461a471a481a491a4a1a4b1a4c1a4d1a4e
1a4f1a501a511a521a531a541a551a561a571a581a591a5a1a5b1a5c1a5d
1a5e1a5f1a601a611a621a631a641a651a661a671a681a691a6a1a6b1a6c
1a6d1a6e1a6f1a701a711a721a731a741a751a761a771a781a791a7a1a7b
1a7c1a7d1a7e1a7f1a801a811a821a831a841a851a861a871a881a891a8a
1a8b1a8c1a8d1a8e1a8f1a901a911a921a931a941a951a961a971a981a99
1a9a1a9b1a9c1a9d1a9e1a9f1aa01aa11aa21aa31aa41aa51aa61aa71aa8
1aa91aaa1aab1aac1aad1aae1aaf1ab01ab11ab21ab31ab41ab51ab61ab7
1ab81ab91aba1abb1abc1abd1abe1abf1ac01ac11ac21ac31ac41ac51ac6
1ac71ac81ac91aca1acb1acc1acd1ace1acf1ad01ad11ad21ad31ad41ad5
1ad61ad71ad81ad91ada1adb1adc1add1ade1adf1ae01ae11ae21ae31ae4
1ae51ae61ae71ae81ae91aea1aeb1aec1aed1aee1aef1af01af11af21af3
1af41af51af61af71af81af91afa1afb1afc1afd1afe1aff1b001b011b02
1b031b041b051b061b071b081b091b0a1b0b1b0c1b0d1b0e1b0f1b101b11
1b121b131b141b151b161b171b181b191b1a1b1b1b1c1b1d1b1e1b1f1b20
1b211b221b231b241b251b261b271b281b291b2a1b2b1b2c1b2d1b2e1b2f
1b301b311b321b331b341b351b361b371b381b391b3a1b3b1b3c1b3d1b3e
1b3f1b401b411b421b431b441b451b461b471b481b491b4a1b4b1b4c1b4d
1b4e1b4f1b501b511b521b531b541b551b561b571b581b591b5a1b5b1b5c
1b5d1b5e1b5f1b601b611b621b631b641b651b661b671b681b691b6a1b6b
1b6c1b6d1b6e1b6f1b701b711b721b731b741b751b761b771b781b791b7a
1b7b1b7c1b7d1b7e1b7f1b801b811b821b831b841b851b861b871b881b89
1b8a1b8b1b8c1b8d1b8e1b8f1b901b911b921b931b941b951b961b971b98
1b991b9a1b9b1b9c1b9d1b9e1b9f1ba01ba11ba21ba31ba41ba51ba61ba7
1ba81ba91baa1bab1bac1bad1bae1baf1bb01bb11bb21bb31bb41bb51bb6
1bb71bb81bb91bba1bbb1bbc1bbd1bbe1bbf1bc01bc11bc21bc31bc41bc5
1bc61bc71bc81bc91bca1bcb1bcc1bcd1bce1bcf1bd01bd11bd21bd31bd4
1bd51bd61bd71bd81bd91bda1bdb1bdc1bdd1bde1bdf1be01be11be21be3
1be41be51be61be71be81be91bea1beb1bec1bed1bee1bef1bf01bf11bf2
1bf31bf41bf51bf61bf71bf81bf91bfa1bfb1bfc1bfd1bfe1bff1c001c01
1c021c031c041c051c061c071c081c091c0a1c0b1c0c1c0d1c0e1c0f1c10
1c111c121c131c141c151c161c171c181c191c1a1c1b1c1c1c1d1c1e1c1f
1c201c211c221c231c241c251c261c271c281c291c2a1c2b1c2c1c2d1c2e
1c2f1c301c311c321c331c341c351c361c371c381c391c3a1c3b1c3c1c3d
1c3e1c3f1c401c411c421c431c441c451c461c471c481c491c4a1c4b1c4c
1c4d1c4e1c4f1c501c511c521c531c541c551c561c571c581c591c5a1c5b
1c5c1c5d1c5e1c5f1c601c611c621c631c641c651c661c671c681c691c6a
1c6b1c6c1c6d1c6e1c6f1c701c711c721c731c741c751c761c771c781c79
1c7a1c7b1c7c1c7d1c7e1c7f1c801c811c821c831c841c851c861c871c88
1c891c8a1c8b1c8c1c8d1c8e1c8f1c901c911c921c931c941c951c961c97
1c981c991c9a1c9b1c9c1c9d1c9e1c9f1ca01ca11ca21ca31ca41ca51ca6
1ca71ca81ca91caa1cab1cac1cad1cae1caf1cb01cb11cb21cb31cb41cb5
1cb61cb71cb81cb91cba1cbb1cbc1cbd1cbe1cbf1cc01cc11cc21cc31cc4
1cc51cc61cc71cc81cc91cca1ccb1ccc1ccd1cce1ccf1cd01cd11cd21cd3
1cd41cd51cd61cd71cd81cd91cda1cdb1cdc1cdd1cde1cdf1ce01ce11ce2
1ce31ce41ce51ce61ce71ce81ce91cea1ceb1cec1ced1cee1cef1cf01cf1
1cf21cf31cf41cf51cf61cf71cf81cf91cfa1cfb1cfc1cfd1cfe1cff1d00
1d011d021d031d041d051d061d071d081d091d0a1d0b1d0c1d0d1d0e1d0f
1d101d111d121d131d141d151d161d171d181d191d1a1d1b1d1c1d1d1d1e
1d1f1d201d211d221d231d241d251d261d271d281d291d2a1d2b1d2c1d2d
1d2e1d2f1d301d311d321d331d341d351d361d371d381d391d3a1d3b1d3c
1d3d1d3e1d3f1d401d411d421d431d441d451d461d471d481d491d4a1d4b
1d4c1d4d1d4e1d4f1d501d511d521d531d541d551d561d571d581d591d5a
1d5b1d5c1d5d1d5e1d5f1d601d611d621d631d641d651d661d671d681d69
1d6a1d6b1d6c1d6d1d6e1d6f1d701d711d721d731d741d751d761d771d78
1d791d7a1d7b1d7c1d7d1d7e1d7f1d801d811d821d831d841d851d861d87
1d881d891d8a1d8b1d8c1d8d1d8e1d8f1d901d911d921d931d941d951d96
1d971d981d991d9a1d9b1d9c1d9d1d9e1d9f1da01da11da21da31da41da5
1da61da71da81da91daa1dab1dac1dad1dae1daf1db01db11db21db31db4
1db51db61db71db81db91dba1dbb1dbc1dbd1dbe1dbf1dc01dc11dc21dc3
1dc41dc51dc61dc71dc81dc91dca1dcb1dcc1dcd1dce1dcf1dd01dd11dd2
1dd31dd41dd51dd61dd71dd81dd91dda1ddb1ddc1ddd1dde1ddf1de01de1
1de21de31de41de51de61de71de81de91dea1deb1dec1ded1dee1def1df0
1df11df21df31df41df51df61df71df81df91dfa1dfb1dfc1dfd1dfe1dff
1e001e011e021e031e041e051e061e071e081e091e0a1e0b1e0c1e0d1e0e
1e0f1e101e111e121e131e141e151e161e171e181e191e1a1e1b1e1c1e1d
1e1e1e1f1e201e211e221e231e241e251e261e271e281e291e2a1e2b1e2c
1e2d1e2e1e2f1e301e311e321e331e341e351e361e371e381e391e3a1e3b
1e3c1e3d1e3e1e3f1e401e411e421e431e441e451e461e471e481e491e4a
1e4b1e4c1e4d1e4e1e4f1e501e511e521e531e541e551e561e571e581e59
1e5a1e5b1e5c1e5d1e5e1e5f1e601e611e621e631e641e651e661e671e68
1e691e6a1e6b1e6c1e6d1e6e1e6f1e701e711e721e731e741e751e761e77
1e781e791e7a1e7b1e7c1e7d1e7e1e7f1e801e811e821e831e841e851e86
1e871e881e891e8a1e8b1e8c1e8d1e8e1e8f1e901e911e921e931e941e95
1e961e971e981e991e9a1e9b1e9c1e9d1e9e1e9f1ea01ea11ea21ea31ea4
1ea51ea61ea71ea81ea91eaa1eab1eac1ead1eae1eaf1eb01eb11eb21eb3
1eb41eb51eb61eb71eb81eb91eba1ebb1ebc1ebd1ebe1ebf1ec01ec11ec2
1ec31ec41ec51ec61ec71ec81ec91eca1ecb1ecc1ecd1ece1ecf1ed01ed1
1ed21ed31ed41ed51ed61ed71ed81ed91eda1edb1edc1edd1ede1edf1ee0
1ee11ee21ee31ee41ee51ee61ee71ee81ee91eea1eeb1eec1eed1eee1eef
1ef01ef11ef21ef31ef41ef51ef61ef71ef81ef91efa1efb1efc1efd1efe
1eff1f001f011f021f031f041f051f061f071f081f091f0a1f0b1f0c1f0d
1f0e1f0f1f101f111f121f131f141f151f161f171f181f191f1a1f1b1f1c
1f1d1f1e1f1f1f201f211f221f231f241f251f261f271f281f291f2a1f2b
1f2c1f2d1f2e1f2f1f301f311f321f331f341f351f361f371f381f391f3a
1f3b1f3c1f3d1f3e1f3f1f401f411f421f431f441f451f461f471f481f49
1f4a1f4b1f4c1f4d1f4e1f4f1f501f511f521f531f541f551f561f571f58
1f591f5a1f5b1f5c1f5d1f5e1f5f1f601f611f621f631f641f651f661f67
1f681f691f6a1f6b1f6c1f6d1f6e1f6f1f701f711f721f731f741f751f76
1f771f781f791f7a1f7b1f7c1f7d1f7e1f7f1f801f811f821f831f841f85
1f861f871f881f891f8a1f8b1f8c1f8d1f8e1f8f1f901f911f921f931f94
1f951f961f971f981f991f9a1f9b1f9c1f9d1f9e1f9f1fa01fa11fa21fa3
1fa41fa51fa61fa71fa81fa91faa1fab1fac1fad1fae1faf1fb01fb11fb2
1fb31fb41fb51fb61fb71fb81fb91fba1fbb1fbc1fbd1fbe1fbf1fc01fc1
1fc21fc31fc41fc51fc61fc71fc81fc91fca1fcb1fcc1fcd1fce1fcf1fd0
1fd11fd21fd31fd41fd51fd61fd71fd81fd91fda1fdb1fdc1fdd1fde1fdf
1fe01fe11fe21fe31fe41fe51fe61fe71fe81fe91fea1feb1fec1fed1fee
1fef1ff01ff11ff21ff31ff41ff51ff61ff71ff81ff91ffa1ffb1ffc1ffd
1ffe1fff2000200120022003200420052006200720082009200a200b200c
200d200e200f2010201120122013201420152016201720182019201a201b
201c201d201e201f2020202120222023202420252026202720282029202a
202b202c202d202e202f2030203120322033203420352036203720382039
203a203b203c203d203e203f204020412042204320442045204620472048
2049204a204b204c204d204e204f20502051205220532054205520562057
20582059205a205b205c205d205e205f2060206120622063206420652066
206720682069206a206b206c206d206e206f207020712072207320742075
2076207720782079207a207b207c207d207e207f20802081208220832084
20852086208720882089208a208b208c208d208e208f2090209120922093
209420952096209720982099209a209b209c209d209e209f20a020a120a2
20a320a420a520a620a720a820a920aa20ab20ac20ad20ae20af20b020b1
20b220b320b420b520b620b720b820b920ba20bb20bc20bd20be20bf20c0
20c120c220c320c420c520c620c720c820c920ca20cb20cc20cd20ce20cf
20d020d120d220d320d420d520d620d720d820d920da20db20dc20dd20de
20df20e020e120e220e320e420e520e620e720e820e920ea20eb20ec20ed
20ee20ef20f020f120f220f320f420f520f620f720f820f920fa20fb20fc
20fd20fe20ff2100210121022103210421052106210721082109210a210b
210c210d210e210f2110211121122113211421152116211721182119211a
211b211c211d211e211f2120212121222123212421252126212721282129
212a212b212c212d212e212f213021312132213321342135213621372138
2139213a213b213c213d213e213f21402141214221432144214521462147
21482149214a214b214c214d214e214f2150215121522153215421552156
215721582159215a215b215c215d215e215f216021612162216321642165
2166216721682169216a216b216c216d216e216f21702171217221732174
21752176217721782179217a217b217c217d217e217f2180218121822183
218421852186218721882189218a218b218c218d218e218f219021912192
2193219421952196219721982199219a219b219c219d219e219f21a021a1
21a221a321a421a521a621a721a821a921aa21ab21ac21ad21ae21af21b0
21b121b221b321b421b521b621b721b821b921ba21bb21bc21bd21be21bf
21c021c121c221c321c421c521c621c721c821c921ca21cb21cc21cd21ce
21cf21d021d121d221d321d421d521d621d721d821d921da21db21dc21dd
21de21df21e021e121e221e321e421e521e621e721e821e921ea21eb21ec
21ed21ee21ef21f021f121f221f321f421f521f621f721f821f921fa21fb
21fc21fd21fe21ff2200220122022203220422052206220722082209220a
220b220c220d220e220f2210221122122213221422152216221722182219
221a221b221c221d221e221f222022212222222322242225222622272228
2229222a222b222c222d222e222f22302231223222332234223522362237
22382239223a223b223c223d223e223f2240224122422243224422452246
224722482249224a224b224c224d224e224f225022512252225322542255
2256225722582259225a225b225c225d225e225f22602261226222632264
22652266226722682269226a226b226c226d226e226f2270227122722273
227422752276227722782279227a227b227c227d227e227f228022812282
2283228422852286228722882289228a228b228c228d228e228f22902291
22922293229422952296229722982299229a229b229c229d229e229f22a0
22a122a222a322a422a522a622a722a822a922aa22ab22ac22ad22ae22af
22b022b122b222b322b422b522b622b722b822b922ba22bb22bc22bd22be
22bf22c022c122c222c322c422c522c622c722c822c922ca22cb22cc22cd
22ce22cf22d022d122d222d322d422d522d622d722d822d922da22db22dc
22dd22de22df22e022e122e222e322e422e522e622e722e822e922ea22eb
22ec22ed22ee22ef22f022f122f222f322f422f522f622f722f822f922fa
22fb22fc22fd22fe22ff2300230123022303230423052306230723082309
230a230b230c230d230e230f231023112312231323142315231623172318
2319231a231b231c231d231e231f23202321232223232324232523262327
23282329232a232b232c232d232e232f2330233123322333233423352336
233723382339233a233b233c233d233e233f234023412342234323442345
2346234723482349234a234b234c234d234e234f23502351235223532354
23552356235723582359235a235b235c235d235e235f2360236123622363
236423652366236723682369236a236b236c236d236e236f237023712372
2373237423752376237723782379237a237b237c237d237e237f23802381
23822383238423852386238723882389238a238b238c238d238e238f2390
239123922393239423952396239723982399239a239b239c239d239e239f
23a023a123a223a323a423a523a623a723a823a923aa23ab23ac23ad23ae
23af23b023b123b223b323b423b523b623b723b823b923ba23bb23bc23bd
23be23bf23c023c123c223c323c423c523c623c723c823c923ca23cb23cc
23cd23ce23cf23d023d123d223d323d423d523d623d723d823d923da23db
23dc23dd23de23df23e023e123e223e323e423e523e623e723e823e923ea
23eb23ec23ed23ee23ef23f023f123f223f323f423f523f623f723f823f9
23fa23fb23fc23fd23fe23ff240024012402240324042405240624072408
2409240a240b240c240d240e240f24102411241224132414241524162417
24182419241a241b241c241d241e241f2420242124222423242424252426
242724282429242a242b242c242d242e242f243024312432243324342435
2436243724382439243a243b243c243d243e243f24402441244224432444
24452446244724482449244a244b244c244d244e244f2450245124522453
245424552456245724582459245a245b245c245d245e245f246024612462
2463246424652466246724682469246a246b246c246d246e246f24702471
24722473247424752476247724782479247a247b247c247d247e247f2480
248124822483248424852486248724882489248a248b248c248d248e248f
2490249124922493249424952496249724982499249a249b249c249d249e
249f24a024a124a224a324a424a524a624a724a824a924aa24ab24ac24ad
24ae24af24b024b124b224b324b424b524b624b724b824b924ba24bb24bc
24bd24be24bf24c024c124c224c324c424c524c624c724c824c924ca24cb
24cc24cd24ce24cf24d024d124d224d324d424d524d624d724d824d924da
24db24dc24dd24de24df24e024e124e224e324e424e524e624e724e824e9
24ea24eb24ec24ed24ee24ef24f024f124f224f324f424f524f624f724f8
24f924fa24fb24fc24fd24fe24ff25002501250225032504250525062507
25082509250a250b250c250d250e250f2510251125122513251425152516
251725182519251a251b251c251d251e251f252025212522252325242525
2526252725282529252a252b252c252d252e252f25302531253225332534
25352536253725382539253a253b253c253d253e253f2540254125422543
254425452546254725482549254a254b254c254d254e254f255025512552
2553255425552556255725582559255a255b255c255d255e255f25602561
25622563256425652566256725682569256a256b256c256d256e256f2570
257125722573257425752576257725782579257a257b257c257d257e257f
2580258125822583258425852586258725882589258a258b258c258d258e
258f2590259125922593259425952596259725982599259a259b259c259d
259e259f25a025a125a225a325a425a525a625a725a825a925aa25ab25ac
25ad25ae25af25b025b125b225b325b425b525b625b725b825b925ba25bb
25bc25bd25be25bf25c025c125c225c325c425c525c625c725c825c925ca
25cb25cc25cd25ce25cf25d025d125d225d325d425d525d625d725d825d9
25da25db25dc25dd25de25df25e025e125e225e325e425e525e625e725e8
25e925ea25eb25ec25ed25ee25ef25f025f125f225f325f425f525f625f7
25f825f925fa25fb25fc25fd25fe25ff2600260126022603260426052606
260726082609260a260b260c260d260e260f261026112612261326142615
2616261726182619261a261b261c261d261e261f26202621262226232624
26252626262726282629262a262b262c262d262e262f2630263126322633
263426352636263726382639263a263b263c263d263e263f264026412642
2643264426452646264726482649264a264b264c264d264e264f26502651
26522653265426552656265726582659265a265b265c265d265e265f2660
266126622663266426652666266726682669266a266b266c266d266e266f
2670267126722673267426752676267726782679267a267b267c267d267e
267f2680268126822683268426852686268726882689268a268b268c268d
268e268f2690269126922693269426952696269726982699269a269b269c
269d269e269f26a026a126a226a326a426a526a626a726a826a926aa26ab
26ac26ad26ae26af26b026b126b226b326b426b526b626b726b826b926ba
26bb26bc26bd26be26bf26c026c126c226c326c426c526c626c726c826c9
26ca26cb26cc26cd26ce26cf26d026d126d226d326d426d526d626d726d8
26d926da26db26dc26dd26de26df26e026e126e226e326e426e526e626e7
26e826e926ea26eb26ec26ed26ee26ef26f026f126f226f326f426f526f6
26f726f826f926fa26fb26fc26fd26fe26ff270027012702270327042705
2706270727082709270a270b270c270d270e270f27102711271227132714
27152716271727182719271a271b271c271d271e271f2720272127222723
272427252726272727282729272a272b272c272d272e272f273027312732
2733273427352736273727382739273a273b273c273d273e273f27402741
27422743274427452746274727482749274a274b274c274d274e274f2750
275127522753275427552756275727582759275a275b275c275d275e275f
2760276127622763276427652766276727682769276a276b276c276d276e
276f2770277127722773277427752776277727782779277a277b277c277d
277e277f2780278127822783278427852786278727882789278a278b278c
278d278e278f2790279127922793279427952796279727982799279a279b
279c279d279e279f27a027a127a227a327a427a527a627a727a827a927aa
27ab27ac27ad27ae27af27b027b127b227b327b427b527b627b727b827b9
27ba27bb27bc27bd27be27bf27c027c127c227c327c427c527c627c727c8
27c927ca27cb27cc27cd27ce27cf27d027d127d227d327d427d527d627d7
27d827d927da27db27dc27dd27de27df27e027e127e227e327e427e527e6
27e727e827e927ea27eb27ec27ed27ee27ef27f027f127f227f327f427f5
27f627f727f827f927fa27fb27fc27fd27fe27ff28002801280228032804
28052806280728082809280a280b280c280d280e280f2810281128122813
281428152816281728182819281a281b281c281d281e281f282028212822
2823282428252826282728282829282a282b282c282d282e282f28302831
28322833283428352836283728382839283a283b283c283d283e283f2840
284128422843284428452846284728482849284a284b284c284d284e284f
2850285128522853285428552856285728582859285a285b285c285d285e
285f2860286128622863286428652866286728682869286a286b286c286d
286e286f2870287128722873287428752876287728782879287a287b287c
287d287e287f2880288128822883288428852886288728882889288a288b
288c288d288e288f2890289128922893289428952896289728982899289a
289b289c289d289e289f28a028a128a228a328a428a528a628a728a828a9
28aa28ab28ac28ad28ae28af28b028b128b228b328b428b528b628b728b8
28b928ba28bb28bc28bd28be28bf28c028c128c228c328c428c528c628c7
28c828c928ca28cb28cc28cd28ce28cf28d028d128d228d328d428d528d6
28d728d828d928da28db28dc28dd28de28df28e028e128e228e328e428e5
28e628e728e828e928ea28eb28ec28ed28ee28ef28f028f128f228f328f4
28f528f628f728f828f928fa28fb28fc28fd28fe28ff2900290129022903
290429052906290729082909290a290b290c290d290e290f291029112912
2913291429152916291729182919291a291b291c291d291e291f29202921
29222923292429252926292729282929292a292b292c292d292e292f2930
293129322933293429352936293729382939293a293b293c293d293e293f
2940294129422943294429452946294729482949294a294b294c294d294e
294f2950295129522953295429552956295729582959295a295b295c295d
295e295f2960296129622963296429652966296729682969296a296b296c
296d296e296f2970297129722973297429752976297729782979297a297b
297c297d297e297f2980298129822983298429852986298729882989298a
298b298c298d298e298f2990299129922993299429952996299729982999
299a299b299c299d299e299f29a029a129a229a329a429a529a629a729a8
29a929aa29ab29ac29ad29ae29af29b029b129b229b329b429b529b629b7
29b829b929ba29bb29bc29bd29be29bf29c029c129c229c329c429c529c6
29c729c829c929ca29cb29cc29cd29ce29cf29d029d129d229d329d429d5
29d629d729d829d929da29db29dc29dd29de29df29e029e129e229e329e4
29e529e629e729e829e929ea29eb29ec29ed29ee29ef29f029f129f229f3
29f429f529f629f729f829f929fa29fb29fc29fd29fe29ff2a002a012a02
2a032a042a052a062a072a082a092a0a2a0b2a0c2a0d2a0e2a0f2a102a11
2a122a132a142a152a162a172a182a192a1a2a1b2a1c2a1d2a1e2a1f2a20
2a212a222a232a242a252a262a272a282a292a2a2a2b2a2c2a2d2a2e2a2f
2a302a312a322a332a342a352a362a372a382a392a3a2a3b2a3c2a3d2a3e
2a3f2a402a412a422a432a442a452a462a472a482a492a4a2a4b2a4c2a4d
2a4e2a4f2a502a512a522a532a542a552a562a572a582a592a5a2a5b2a5c
2a5d2a5e2a5f2a602a612a622a632a642a652a662a672a682a692a6a2a6b
2a6c2a6d2a6e2a6f2a702a712a722a732a742a752a762a772a782a792a7a
2a7b2a7c2a7d2a7e2a7f2a802a812a822a832a842a852a862a872a882a89
2a8a2a8b2a8c2a8d2a8e2a8f2a902a912a922a932a942a952a962a972a98
2a992a9a2a9b2a9c2a9d2a9e2a9f2aa02aa12aa22aa32aa42aa52aa62aa7
2aa82aa92aaa2aab2aac2aad2aae2aaf2ab02ab12ab22ab32ab42ab52ab6
2ab72ab82ab92aba2abb2abc2abd2abe2abf2ac02ac12ac22ac32ac42ac5
2ac62ac72ac82ac92aca2acb2acc2acd2ace2acf2ad02ad12ad22ad32ad4
2ad52ad62ad72ad82ad92ada2adb2adc2add2ade2adf2ae02ae12ae22ae3
2ae42ae52ae62ae72ae82ae92aea2aeb2aec2aed2aee2aef2af02af12af2
2af32af42af52af62af72af82af92afa2afb2afc2afd2afe2aff2b002b01
2b022b032b042b052b062b072b082b092b0a2b0b2b0c2b0d2b0e2b0f2b10
2b112b122b132b142b152b162b172b182b192b1a2b1b2b1c2b1d2b1e2b1f
2b202b212b222b232b242b252b262b272b282b292b2a2b2b2b2c2b2d2b2e
2b2f2b302b312b322b332b342b352b362b372b382b392b3a2b3b2b3c2b3d
2b3e2b3f2b402b412b422b432b442b452b462b472b482b492b4a2b4b2b4c
2b4d2b4e2b4f2b502b512b522b532b542b552b562b572b582b592b5a2b5b
2b5c2b5d2b5e2b5f2b602b612b622b632b642b652b662b672b682b692b6a
2b6b2b6c2b6d2b6e2b6f2b702b712b722b732b742b752b762b772b782b79
2b7a2b7b2b7c2b7d2b7e2b7f2b802b812b822b832b842b852b862b872b88
2b892b8a2b8b2b8c2b8d2b8e2b8f2b902b912b922b932b942b952b962b97
2b982b992b9a2b9b2b9c2b9d2b9e2b9f2ba02ba12ba22ba32ba42ba52ba6
2ba72ba82ba92baa2bab2bac2bad2bae2baf2bb02bb12bb22bb32bb42bb5
2bb62bb72bb82bb92bba2bbb2bbc2bbd2bbe2bbf2bc02bc12bc22bc32bc4
2bc52bc62bc72bc82bc92bca2bcb2bcc2bcd2bce2bcf2bd02bd12bd22bd3
2bd42bd52bd62bd72bd82bd92bda2bdb2bdc2bdd2bde2bdf2be02be12be2
2be32be42be52be62be72be82be92bea2beb2bec2bed2bee2bef2bf02bf1
2bf22bf32bf42bf52bf62bf72bf82bf92bfa2bfb2bfc2bfd2bfe2bff2c00
2c012c022c032c042c052c062c072c082c092c0a2c0b2c0c2c0d2c0e2c0f
2c102c112c122c132c142c152c162c172c182c192c1a2c1b2c1c2c1d2c1e
2c1f2c202c212c222c232c242c252c262c272c282c292c2a2c2b2c2c2c2d
2c2e2c2f2c302c312c322c332c342c352c362c372c382c392c3a2c3b2c3c
2c3d2c3e2c3f2c402c412c422c432c442c452c462c472c482c492c4a2c4b
2c4c2c4d2c4e2c4f2c502c512c522c532c542c552c562c572c582c592c5a
2c5b2c5c2c5d2c5e2c5f2c602c612c622c632c642c652c662c672c682c69
2c6a2c6b2c6c2c6d2c6e2c6f2c702c712c722c732c742c752c762c772c78
2c792c7a2c7b2c7c2c7d2c7e2c7f2c802c812c822c832c842c852c862c87
2c882c892c8a2c8b2c8c2c8d2c8e2c8f2c902c912c922c932c942c952c96
2c972c982c992c9a2c9b2c9c2c9d2c9e2c9f2ca02ca12ca22ca32ca42ca5
2ca62ca72ca82ca92caa2cab2cac2cad2cae2caf2cb02cb12cb22cb32cb4
2cb52cb62cb72cb82cb92cba2cbb2cbc2cbd2cbe2cbf2cc02cc12cc22cc3
2cc42cc52cc62cc72cc82cc92cca2ccb2ccc2ccd2cce2ccf2cd02cd12cd2
2cd32cd42cd52cd62cd72cd82cd92cda2cdb2cdc2cdd2cde2cdf2ce02ce1
2ce22ce32ce42ce52ce62ce72ce82ce92cea2ceb2cec2ced2cee2cef2cf0
2cf12cf22cf32cf42cf52cf62cf72cf82cf92cfa2cfb2cfc2cfd2cfe2cff
2d002d012d022d032d042d052d062d072d082d092d0a2d0b2d0c2d0d2d0e
2d0f2d102d112d122d132d142d152d162d172d182d192d1a2d1b2d1c2d1d
2d1e2d1f2d202d212d222d232d242d252d262d272d282d292d2a2d2b2d2c
2d2d2d2e2d2f2d302d312d322d332d342d352d362d372d382d392d3a2d3b
2d3c2d3d2d3e2d3f2d402d412d422d432d442d452d462d472d482d492d4a
2d4b2d4c2d4d2d4e2d4f2d502d512d522d532d542d552d562d572d582d59
2d5a2d5b2d5c2d5d2d5e2d5f2d602d612d622d632d642d652d662d672d68
2d692d6a2d6b2d6c2d6d2d6e2d6f2d702d712d722d732d742d752d762d77
2d782d792d7a2d7b2d7c2d7d2d7e2d7f2d802d812d822d832d842d852d86
2d872d882d892d8a2d8b2d8c2d8d2d8e2d8f2d902d912d922d932d942d95
2d962d972d982d992d9a2d9b2d9c2d9d2d9e2d9f2da02da12da22da32da4
2da52da62da72da82da92daa2dab2dac2dad2dae2daf2db02db12db22db3
2db42db52db62db72db82db92dba2dbb2dbc2dbd2dbe2dbf2dc02dc12dc2
2dc32dc42dc52dc62dc72dc82dc92dca2dcb2dcc2dcd2dce2dcf2dd02dd1
2dd22dd32dd42dd52dd62dd72dd82dd92dda2ddb2ddc2ddd2dde2ddf2de0
2de12de22de32de42de52de62de72de82de92dea2deb2dec2ded2dee2def
2df02df12df22df32df42df52df62df72df82df92dfa2dfb2dfc2dfd2dfe
2dff2e002e012e022e032e042e052e062e072e082e092e0a2e0b2e0c2e0d
2e0e2e0f2e102e112e122e132e142e152e162e172e182e192e1a2e1b2e1c
2e1d2e1e2e1f2e202e212e222e232e242e252e262e272e282e292e2a2e2b
2e2c2e2d2e2e2e2f2e302e312e322e332e342e352e362e372e382e392e3a
2e3b2e3c2e3d2e3e2e3f2e402e412e422e432e442e452e462e472e482e49
2e4a2e4b2e4c2e4d2e4e2e4f2e502e512e522e532e542e552e562e572e58
2e592e5a2e5b2e5c2e5d2e5e2e5f2e602e612e622e632e642e652e662e67
2e682e692e6a2e6b2e6c2e6d2e6e2e6f2e702e712e722e732e742e752e76
2e772e782e792e7a2e7b2e7c2e7d2e7e2e7f2e802e812e822e832e842e85
2e862e872e882e892e8a2e8b2e8c2e8d2e8e2e8f2e902e912e922e932e94
2e952e962e972e982e992e9a2e9b2e9c2e9d2e9e2e9f2ea02ea12ea22ea3
2ea42ea52ea62ea72ea82ea92eaa2eab2eac2ead2eae2eaf2eb02eb12eb2
2eb32eb42eb52eb62eb72eb82eb92eba2ebb2ebc2ebd2ebe2ebf2ec02ec1
2ec22ec32ec42ec52ec62ec72ec82ec92eca2ecb2ecc2ecd2ece2ecf2ed0
2ed12ed22ed32ed42ed52ed62ed72ed82ed92eda2edb2edc2edd2ede2edf
2ee02ee12ee22ee32ee42ee52ee62ee72ee82ee92eea2eeb2eec2eed2eee
2eef2ef02ef12ef22ef32ef42ef52ef62ef72ef82ef92efa2efb2efc2efd
2efe2eff2f002f012f022f032f042f052f062f072f082f092f0a2f0b2f0c
2f0d2f0e2f0f2f102f112f122f132f142f152f162f172f182f192f1a2f1b
2f1c2f1d2f1e2f1f2f202f212f222f232f242f252f262f272f282f292f2a
2f2b2f2c2f2d2f2e2f2f2f302f312f322f332f342f352f362f372f382f39
2f3a2f3b2f3c2f3d2f3e2f3f2f402f412f422f432f442f452f462f472f48
2f492f4a2f4b2f4c2f4d2f4e2f4f2f502f512f522f532f542f552f562f57
2f582f592f5a2f5b2f5c2f5d2f5e2f5f2f602f612f622f632f642f652f66
2f672f682f692f6a2f6b2f6c2f6d2f6e2f6f2f702f712f722f732f742f75
2f762f772f782f792f7a2f7b2f7c2f7d2f7e2f7f2f802f812f822f832f84
2f852f862f872f882f892f8a2f8b2f8c2f8d2f8e2f8f2f902f912f922f93
2f942f952f962f972f982f992f9a2f9b2f9c2f9d2f9e2f9f2fa02fa12fa2
2fa32fa42fa52fa62fa72fa82fa92faa2fab2fac2fad2fae2faf2fb02fb1
2fb22fb32fb42fb52fb62fb72fb82fb92fba2fbb2fbc2fbd2fbe2fbf2fc0
2fc12fc22fc32fc42fc52fc62fc72fc82fc92fca2fcb2fcc2fcd2fce2fcf
2fd02fd12fd22fd32fd42fd52fd62fd72fd82fd92fda2fdb2fdc2fdd2fde
2fdf2fe02fe12fe22fe32fe42fe52fe62fe72fe82fe92fea2feb2fec2fed
2fee2fef2ff02ff12ff22ff32ff42ff52ff62ff72ff82ff92ffa2ffb2ffc
2ffd2ffe2fff3000300130023003300430053006300730083009300a300b
300c300d300e300f3010301130123013301430153016301730183019301a
301b301c301d301e301f3020302130223023302430253026302730283029
302a302b302c302d302e302f303030313032303330343035303630373038
3039303a303b303c303d303e303f30403041304230433044304530463047
30483049304a304b304c304d304e304f3050305130523053305430553056
305730583059305a305b305c305d305e305f306030613062306330643065
3066306730683069306a306b306c306d306e306f30703071307230733074
30753076307730783079307a307b307c307d307e307f3080308130823083
308430853086308730883089308a308b308c308d308e308f309030913092
3093309430953096309730983099309a309b309c309d309e309f30a030a1
30a230a330a430a530a630a730a830a930aa30ab30ac30ad30ae30af30b0
30b130b230b330b430b530b630b730b830b930ba30bb30bc30bd30be30bf
30c030c130c230c330c430c530c630c730c830c930ca30cb30cc30cd30ce
30cf30d030d130d230d330d430d530d630d730d830d930da30db30dc30dd
30de30df30e030e130e230e330e430e530e630e730e830e930ea30eb30ec
30ed30ee30ef30f030f130f230f330f430f530f630f730f830f930fa30fb
30fc30fd30fe30ff3100310131023103310431053106310731083109310a
310b310c310d310e310f3110311131123113311431153116311731183119
311a311b311c311d311e311f312031213122312331243125312631273128
3129312a312b312c312d312e312f31303131313231333134313531363137
31383139313a313b313c313d313e313f3140314131423143314431453146
314731483149314a314b314c314d314e314f315031513152315331543155
3156315731583159315a315b315c315d315e315f31603161316231633164
31653166316731683169316a316b316c316d316e316f3170317131723173
317431753176317731783179317a317b317c317d317e317f318031813182
3183318431853186318731883189318a318b318c318d318e318f31903191
31923193319431953196319731983199319a319b319c319d319e319f31a0
31a131a231a331a431a531a631a731a831a931aa31ab31ac31ad31ae31af
31b031b131b231b331b431b531b631b731b831b931ba31bb31bc31bd31be
31bf31c031c131c231c331c431c531c631c731c831c931ca31cb31cc31cd
31ce31cf31d031d131d231d331d431d531d631d731d831d931da31db31dc
31dd31de31df31e031e131e231e331e431e531e631e731e831e931ea31eb
31ec31ed31ee31ef31f031f131f231f331f431f531f631f731f831f931fa
31fb31fc31fd31fe31ff3200320132023203320432053206320732083209
320a320b320c320d320e320f321032113212321332143215321632173218
3219321a321b321c321d321e321f32203221322232233224322532263227
32283229322a322b322c322d322e322f3230323132323233323432353236
323732383239323a323b323c323d323e323f324032413242324332443245
3246324732483249324a324b324c324d324e324f32503251325232533254
32553256325732583259325a325b325c325d325e325f3260326132623263
326432653266326732683269326a326b326c326d326e326f327032713272
3273327432753276327732783279327a327b327c327d327e327f32803281
32823283328432853286328732883289328a328b328c328d328e328f3290
329132923293329432953296329732983299329a329b329c329d329e329f
32a032a132a232a332a432a532a632a732a832a932aa32ab32ac32ad32ae
32af32b032b132b232b332b432b532b632b732b832b932ba32bb32bc32bd
32be32bf32c032c132c232c332c432c532c632c732c832c932ca32cb32cc
32cd32ce32cf32d032d132d232d332d432d532d632d732d832d932da32db
32dc32dd32de32df32e032e132e232e332e432e532e632e732e832e932ea
32eb32ec32ed32ee32ef32f032f132f232f332f432f532f632f732f832f9
32fa32fb32fc32fd32fe32ff330033013302330333043305330633073308
3309330a330b330c330d330e330f33103311331233133314331533163317
33183319331a331b331c331d331e331f3320332133223323332433253326
332733283329332a332b332c332d332e332f333033313332333333343335
3336333733383339333a333b333c333d333e333f33403341334233433344
33453346334733483349334a334b334c334d334e334f3350335133523353
335433553356335733583359335a335b335c335d335e335f336033613362
3363336433653366336733683369336a336b336c336d336e336f33703371
33723373337433753376337733783379337a337b337c337d337e337f3380
338133823383338433853386338733883389338a338b338c338d338e338f
3390339133923393339433953396339733983399339a339b339c339d339e
339f33a033a133a233a333a433a533a633a733a833a933aa33ab33ac33ad
33ae33af33b033b133b233b333b433b533b633b733b833b933ba33bb33bc
33bd33be33bf33c033c133c233c333c433c533c633c733c833c933ca33cb
33cc33cd33ce33cf33d033d133d233d333d433d533d633d733d833d933da
33db33dc33dd33de33df33e033e133e233e333e433e533e633e733e833e9
33ea33eb33ec33ed33ee33ef33f033f133f233f333f433f533f633f733f8
33f933fa33fb33fc33fd33fe33ff34003401340234033404340534063407
34083409340a340b340c340d340e340f3410341134123413341434153416
341734183419341a341b341c341d341e341f342034213422342334243425
3426342734283429342a342b342c342d342e342f34303431343234333434
34353436343734383439343a343b343c343d343e343f3440344134423443
344434453446344734483449344a344b344c344d344e344f345034513452
3453345434553456345734583459345a345b345c345d345e345f34603461
34623463346434653466346734683469346a346b346c346d346e346f3470
347134723473347434753476347734783479347a347b347c347d347e347f
3480348134823483348434853486348734883489348a348b348c348d348e
348f3490349134923493349434953496349734983499349a349b349c349d
349e349f34a034a134a234a334a434a534a634a734a834a934aa34ab34ac
34ad34ae34af34b034b134b234b334b434b534b634b734b834b934ba34bb
34bc34bd34be34bf34c034c134c234c334c434c534c634c734c834c934ca
34cb34cc34cd34ce34cf34d034d134d234d334d434d534d634d734d834d9
34da34db34dc34dd34de34df34e034e134e234e334e434e534e634e734e8
34e934ea34eb34ec34ed34ee34ef34f034f134f234f334f434f534f634f7
34f834f934fa34fb34fc34fd34fe34ff3500350135023503350435053506
350735083509350a350b350c350d350e350f351035113512351335143515
3516351735183519351a351b351c351d351e351f35203521352235233524
35253526352735283529352a352b352c352d352e352f3530353135323533
353435353536353735383539353a353b353c353d353e353f354035413542
3543354435453546354735483549354a354b354c354d354e354f35503551
35523553355435553556355735583559355a355b355c355d355e355f3560
356135623563356435653566356735683569356a356b356c356d356e356f
3570357135723573357435753576357735783579357a357b357c357d357e
357f3580358135823583358435853586358735883589358a358b358c358d
358e358f3590359135923593359435953596359735983599359a359b359c
359d359e359f35a035a135a235a335a435a535a635a735a835a935aa35ab
35ac35ad35ae35af35b035b135b235b335b435b535b635b735b835b935ba
35bb35bc35bd35be35bf35c035c135c235c335c435c535c635c735c835c9
35ca35cb35cc35cd35ce35cf35d035d135d235d335d435d535d635d735d8
35d935da35db35dc35dd35de35df35e035e135e235e335e435e535e635e7
35e835e935ea35eb35ec35ed35ee35ef35f035f135f235f335f435f535f6
35f735f835f935fa35fb35fc35fd35fe35ff360036013602360336043605
3606360736083609360a360b360c360d360e360f36103611361236133614
36153616361736183619361a361b361c361d361e361f3620362136223623
362436253626362736283629362a362b362c362d362e362f363036313632
3633363436353636363736383639363a363b363c363d363e363f36403641
36423643364436453646364736483649364a364b364c364d364e364f3650
365136523653365436553656365736583659365a365b365c365d365e365f
3660366136623663366436653666366736683669366a366b366c366d366e
366f3670367136723673367436753676367736783679367a367b367c367d
367e367f3680368136823683368436853686368736883689368a368b368c
368d368e368f3690369136923693369436953696369736983699369a369b
369c369d369e369f36a036a136a236a336a436a536a636a736a836a936aa
36ab36ac36ad36ae36af36b036b136b236b336b436b536b636b736b836b9
36ba36bb36bc36bd36be36bf36c036c136c236c336c436c536c636c736c8
36c936ca36cb36cc36cd36ce36cf36d036d136d236d336d436d536d636d7
36d836d936da36db36dc36dd36de36df36e036e136e236e336e436e536e6
36e736e836e936ea36eb36ec36ed36ee36ef36f036f136f236f336f436f5
36f636f736f836f936fa36fb36fc36fd36fe36ff37003701370237033704
37053706370737083709370a370b370c370d370e370f3710371137123713
371437153716371737183719371a371b371c371d371e371f372037213722
3723372437253726372737283729372a372b372c372d372e372f37303731
37323733373437353736373737383739373a373b373c373d373e373f3740
374137423743374437453746374737483749374a374b374c374d374e374f
3750375137523753375437553756375737583759375a375b375c375d375e
375f3760376137623763376437653766376737683769376a376b376c376d
376e376f3770377137723773377437753776377737783779377a377b377c
377d377e377f3780378137823783378437853786378737883789378a378b
378c378d378e378f3790379137923793379437953796379737983799379a
379b379c379d379e379f37a037a137a237a337a437a537a637a737a837a9
37aa37ab37ac37ad37ae37af37b037b137b237b337b437b537b637b737b8
37b937ba37bb37bc37bd37be37bf37c037c137c237c337c437c537c637c7
37c837c937ca37cb37cc37cd37ce37cf37d037d137d237d337d437d537d6
37d737d837d937da37db37dc37dd37de37df37e037e137e237e337e437e5
37e637e737e837e937ea37eb37ec37ed37ee37ef37f037f137f237f337f4
37f537f637f737f837f937fa37fb37fc37fd37fe37ff3800380138023803
380438053806380738083809380a380b380c380d380e380f381038113812
3813381438153816381738183819381a381b381c381d381e381f38203821
38223823382438253826382738283829382a382b382c382d382e382f3830
383138323833383438353836383738383839383a383b383c383d383e383f
3840384138423843384438453846384738483849384a384b384c384d384e
384f3850385138523853385438553856385738583859385a385b385c385d
385e385f3860386138623863386438653866386738683869386a386b386c
386d386e386f3870387138723873387438753876387738783879387a387b
387c387d387e387f3880388138823883388438853886388738883889388a
388b388c388d388e388f3890389138923893389438953896389738983899
389a389b389c389d389e389f38a038a138a238a338a438a538a638a738a8
38a938aa38ab38ac38ad38ae38af38b038b138b238b338b438b538b638b7
38b838b938ba38bb38bc38bd38be38bf38c038c138c238c338c438c538c6
38c738c838c938ca38cb38cc38cd38ce38cf38d038d138d238d338d438d5
38d638d738d838d938da38db38dc38dd38de38df38e038e138e238e338e4
38e538e638e738e838e938ea38eb38ec38ed38ee38ef38f038f138f238f3
38f438f538f638f738f838f938fa38fb38fc38fd38fe38ff390039013902
3903390439053906390739083909390a390b390c390d390e390f39103911
39123913391439153916391739183919391a391b391c391d391e391f3920
392139223923392439253926392739283929392a392b392c392d392e392f
3930393139323933393439353936393739383939393a393b393c393d393e
393f3940394139423943394439453946394739483949394a394b394c394d
394e394f3950395139523953395439553956395739583959395a395b395c
395d395e395f3960396139623963396439653966396739683969396a396b
396c396d396e396f3970397139723973397439753976397739783979397a
397b397c397d397e397f3980398139823983398439853986398739883989
398a398b398c398d398e398f399039913992399339943995399639973998
3999399a399b399c399d399e399f39a039a139a239a339a439a539a639a7
39a839a939aa39ab39ac39ad39ae39af39b039b139b239b339b439b539b6
39b739b839b939ba39bb39bc39bd39be39bf39c039c139c239c339c439c5
39c639c739c839c939ca39cb39cc39cd39ce39cf39d039d139d239d339d4
39d539d639d739d839d939da39db39dc39dd39de39df39e039e139e239e3
39e439e539e639e739e839e939ea39eb39ec39ed39ee39ef39f039f139f2
39f339f439f539f639f739f839f939fa39fb39fc39fd39fe39ff3a003a01
3a023a033a043a053a063a073a083a093a0a3a0b3a0c3a0d3a0e3a0f3a10
3a113a123a133a143a153a163a173a183a193a1a3a1b3a1c3a1d3a1e3a1f
3a203a213a223a233a243a253a263a273a283a293a2a3a2b3a2c3a2d3a2e
3a2f3a303a313a323a333a343a353a363a373a383a393a3a3a3b3a3c3a3d
3a3e3a3f3a403a413a423a433a443a453a463a473a483a493a4a3a4b3a4c
3a4d3a4e3a4f3a503a513a523a533a543a553a563a573a583a593a5a3a5b
3a5c3a5d3a5e3a5f3a603a613a623a633a643a653a663a673a683a693a6a
3a6b3a6c3a6d3a6e3a6f3a703a713a723a733a743a753a763a773a783a79
3a7a3a7b3a7c3a7d3a7e3a7f3a803a813a823a833a843a853a863a873a88
3a893a8a3a8b3a8c3a8d3a8e3a8f3a903a913a923a933a943a953a963a97
3a983a993a9a3a9b3a9c3a9d3a9e3a9f3aa03aa13aa23aa33aa43aa53aa6
3aa73aa83aa93aaa3aab3aac3aad3aae3aaf3ab03ab13ab23ab33ab43ab5
3ab63ab73ab83ab93aba3abb3abc3abd3abe3abf3ac03ac13ac23ac33ac4
3ac53ac63ac73ac83ac93aca3acb3acc3acd3ace3acf3ad03ad13ad23ad3
3ad43ad53ad63ad73ad83ad93ada3adb3adc3add3ade3adf3ae03ae13ae2
3ae33ae43ae53ae63ae73ae83ae93aea3aeb3aec3aed3aee3aef3af03af1
3af23af33af43af53af63af73af83af93afa3afb3afc3afd3afe3aff3b00
3b013b023b033b043b053b063b073b083b093b0a3b0b3b0c3b0d3b0e3b0f
3b103b113b123b133b143b153b163b173b183b193b1a3b1b3b1c3b1d3b1e
3b1f3b203b213b223b233b243b253b263b273b283b293b2a3b2b3b2c3b2d
3b2e3b2f3b303b313b323b333b343b353b363b373b383b393b3a3b3b3b3c
3b3d3b3e3b3f3b403b413b423b433b443b453b463b473b483b493b4a3b4b
3b4c3b4d3b4e3b4f3b503b513b523b533b543b553b563b573b583b593b5a
3b5b3b5c3b5d3b5e3b5f3b603b613b623b633b643b653b663b673b683b69
3b6a3b6b3b6c3b6d3b6e3b6f3b703b713b723b733b743b753b763b773b78
3b793b7a3b7b3b7c3b7d3b7e3b7f3b803b813b823b833b843b853b863b87
3b883b893b8a3b8b3b8c3b8d3b8e3b8f3b903b913b923b933b943b953b96
3b973b983b993b9a3b9b3b9c3b9d3b9e3b9f3ba03ba13ba23ba33ba43ba5
3ba63ba73ba83ba93baa3bab3bac3bad3bae3baf3bb03bb13bb23bb33bb4
3bb53bb63bb73bb83bb93bba3bbb3bbc3bbd3bbe3bbf3bc03bc13bc23bc3
3bc43bc53bc63bc73bc83bc93bca3bcb3bcc3bcd3bce3bcf3bd03bd13bd2
3bd33bd43bd53bd63bd73bd83bd93bda3bdb3bdc3bdd3bde3bdf3be03be1
3be23be33be43be53be63be73be83be93bea3beb3bec3bed3bee3bef3bf0
3bf13bf23bf33bf43bf53bf63bf73bf83bf93bfa3bfb3bfc3bfd3bfe3bff
3c003c013c023c033c043c053c063c073c083c093c0a3c0b3c0c3c0d3c0e
3c0f3c103c113c123c133c143c153c163c173c183c193c1a3c1b3c1c3c1d
3c1e3c1f3c203c213c223c233c243c253c263c273c283c293c2a3c2b3c2c
3c2d3c2e3c2f3c303c313c323c333c343c353c363c373c383c393c3a3c3b
3c3c3c3d3c3e3c3f3c403c413c423c433c443c453c463c473c483c493c4a
3c4b3c4c3c4d3c4e3c4f3c503c513c523c533c543c553c563c573c583c59
3c5a3c5b3c5c3c5d3c5e3c5f3c603c613c623c633c643c653c663c673c68
3c693c6a3c6b3c6c3c6d3c6e3c6f3c703c713c723c733c743c753c763c77
3c783c793c7a3c7b3c7c3c7d3c7e3c7f3c803c813c823c833c843c853c86
3c873c883c893c8a3c8b3c8c3c8d3c8e3c8f3c903c913c923c933c943c95
3c963c973c983c993c9a3c9b3c9c3c9d3c9e3c9f3ca03ca13ca23ca33ca4
3ca53ca63ca73ca83ca93caa3cab3cac3cad3cae3caf3cb03cb13cb23cb3
3cb43cb53cb63cb73cb83cb93cba3cbb3cbc3cbd3cbe3cbf3cc03cc13cc2
3cc33cc43cc53cc63cc73cc83cc93cca3ccb3ccc3ccd3cce3ccf3cd03cd1
3cd23cd33cd43cd53cd63cd73cd83cd93cda3cdb3cdc3cdd3cde3cdf3ce0
3ce13ce23ce33ce43ce53ce63ce73ce83ce93cea3ceb3cec3ced3cee3cef
3cf03cf13cf23cf33cf43cf53cf63cf73cf83cf93cfa3cfb3cfc3cfd3cfe
3cff3d003d013d023d033d043d053d063d073d083d093d0a3d0b3d0c3d0d
3d0e3d0f3d103d113d123d133d143d153d163d173d183d193d1a3d1b3d1c
3d1d3d1e3d1f3d203d213d223d233d243d253d263d273d283d293d2a3d2b
3d2c3d2d3d2e3d2f3d303d313d323d333d343d353d363d373d383d393d3a
3d3b3d3c3d3d3d3e3d3f3d403d413d423d433d443d453d463d473d483d49
3d4a3d4b3d4c3d4d3d4e3d4f3d503d513d523d533d543d553d563d573d58
3d593d5a3d5b3d5c3d5d3d5e3d5f3d603d613d623d633d643d653d663d67
3d683d693d6a3d6b3d6c3d6d3d6e3d6f3d703d713d723d733d743d753d76
3d773d783d793d7a3d7b3d7c3d7d3d7e3d7f3d803d813d823d833d843d85
3d863d873d883d893d8a3d8b3d8c3d8d3d8e3d8f3d903d913d923d933d94
3d953d963d973d983d993d9a3d9b3d9c3d9d3d9e3d9f3da03da13da23da3
3da43da53da63da73da83da93daa3dab3dac3dad3dae3daf3db03db13db2
3db33db43db53db63db73db83db93dba3dbb3dbc3dbd3dbe3dbf3dc03dc1
3dc23dc33dc43dc53dc63dc73dc83dc93dca3dcb3dcc3dcd3dce3dcf3dd0
3dd13dd23dd33dd43dd53dd63dd73dd83dd93dda3ddb3ddc3ddd3dde3ddf
3de03de13de23de33de43de53de63de73de83de93dea3deb3dec3ded3dee
3def3df03df13df23df33df43df53df63df73df83df93dfa3dfb3dfc3dfd
3dfe3dff3e003e013e023e033e043e053e063e073e083e093e0a3e0b3e0c
3e0d3e0e3e0f3e103e113e123e133e143e153e163e173e183e193e1a3e1b
3e1c3e1d3e1e3e1f3e203e213e223e233e243e253e263e273e283e293e2a
3e2b3e2c3e2d3e2e3e2f3e303e313e323e333e343e353e363e373e383e39
3e3a3e3b3e3c3e3d3e3e3e3f3e403e413e423e433e443e453e463e473e48
3e493e4a3e4b3e4c3e4d3e4e3e4f3e503e513e523e533e543e553e563e57
3e583e593e5a3e5b3e5c3e5d3e5e3e5f3e603e613e623e633e643e653e66
3e673e683e693e6a3e6b3e6c3e6d3e6e3e6f3e703e713e723e733e743e75
3e763e773e783e793e7a3e7b3e7c3e7d3e7e3e7f3e803e813e823e833e84
3e853e863e873e883e893e8a3e8b3e8c3e8d3e8e3e8f3e903e913e923e93
3e943e953e963e973e983e993e9a3e9b3e9c3e9d3e9e3e9f3ea03ea13ea2
3ea33ea43ea53ea63ea73ea83ea93eaa3eab3eac3ead3eae3eaf3eb03eb1
3eb23eb33eb43eb53eb63eb73eb83eb93eba3ebb3ebc3ebd3ebe3ebf3ec0
3ec13ec23ec33ec43ec53ec63ec73ec83ec93eca3ecb3ecc3ecd3ece3ecf
3ed03ed13ed23ed33ed43ed53ed63ed73ed83ed93eda3edb3edc3edd3ede
3edf3ee03ee13ee23ee33ee43ee53ee63ee73ee83ee93eea3eeb3eec3eed
3eee3eef3ef03ef13ef23ef33ef43ef53ef63ef73ef83ef93efa3efb3efc
3efd3efe3eff3f003f013f023f033f043f053f063f073f083f093f0a3f0b
3f0c3f0d3f0e3f0f3f103f113f123f133f143f153f163f173f183f193f1a
3f1b3f1c3f1d3f1e3f1f3f203f213f223f233f243f253f263f273f283f29
3f2a3f2b3f2c3f2d3f2e3f2f3f303f313f323f333f343f353f363f373f38
3f393f3a3f3b3f3c3f3d3f3e3f3f3f403f413f423f433f443f453f463f47
3f483f493f4a3f4b3f4c3f4d3f4e3f4f3f503f513f523f533f543f553f56
3f573f583f593f5a3f5b3f5c3f5d3f5e3f5f3f603f613f623f633f643f65
3f663f673f683f693f6a3f6b3f6c3f6d3f6e3f6f3f703f713f723f733f74
3f753f763f773f783f793f7a3f7b3f7c3f7d3f7e3f7f3f803f813f823f83
3f843f853f863f873f883f893f8a3f8b3f8c3f8d3f8e3f8f3f903f913f92
3f933f943f953f963f973f983f993f9a3f9b3f9c3f9d3f9e3f9f3fa03fa1
3fa23fa33fa43fa53fa63fa73fa83fa93faa3fab3fac3fad3fae3faf3fb0
3fb13fb23fb33fb43fb53fb63fb73fb83fb93fba3fbb3fbc3fbd3fbe3fbf
3fc03fc13fc23fc33fc43fc53fc63fc73fc83fc93fca3fcb3fcc3fcd3fce
3fcf3fd03fd13fd23fd33fd43fd53fd63fd73fd83fd93fda3fdb3fdc3fdd
3fde3fdf3fe03fe13fe23fe33fe43fe53fe63fe73fe83fe93fea3feb3fec
3fed3fee3fef3ff03ff13ff23ff33ff43ff53ff63ff73ff83ff93ffa3ffb
3ffc3ffd3ffe3fff4000400140024003400440054006400740084009400a
400b400c400d400e400f4010401140124013401440154016401740184019
401a401b401c401d401e401f402040214022402340244025402640274028
4029402a402b402c402d402e402f40304031403240334034403540364037
40384039403a403b403c403d403e403f4040404140424043404440454046
404740484049404a404b404c404d404e404f405040514052405340544055
4056405740584059405a405b405c405d405e405f40604061406240634064
40654066406740684069406a406b406c406d406e406f4070407140724073
407440754076407740784079407a407b407c407d407e407f408040814082
4083408440854086408740884089408a408b408c408d408e408f40904091
40924093409440954096409740984099409a409b409c409d409e409f40a0
40a140a240a340a440a540a640a740a840a940aa40ab40ac40ad40ae40af
40b040b140b240b340b440b540b640b740b840b940ba40bb40bc40bd40be
40bf40c040c140c240c340c440c540c640c740c840c940ca40cb40cc40cd
40ce40cf40d040d140d240d340d440d540d640d740d840d940da40db40dc
40dd40de40df40e040e140e240e340e440e540e640e740e840e940ea40eb
40ec40ed40ee40ef40f040f140f240f340f440f540f640f740f840f940fa
40fb40fc40fd40fe40ff4100410141024103410441054106410741084109
410a410b410c410d410e410f411041114112411341144115411641174118
4119411a411b411c411d411e411f41204121412241234124412541264127
41284129412a412b412c412d412e412f4130413141324133413441354136
413741384139413a413b413c413d413e413f414041414142414341444145
4146414741484149414a414b414c414d414e414f41504151415241534154
41554156415741584159415a415b415c415d415e415f4160416141624163
416441654166416741684169416a416b416c416d416e416f417041714172
4173417441754176417741784179417a417b417c417d417e417f41804181
41824183418441854186418741884189418a418b418c418d418e418f4190
419141924193419441954196419741984199419a419b419c419d419e419f
41a041a141a241a341a441a541a641a741a841a941aa41ab41ac41ad41ae
41af41b041b141b241b341b441b541b641b741b841b941ba41bb41bc41bd
41be41bf41c041c141c241c341c441c541c641c741c841c941ca41cb41cc
41cd41ce41cf41d041d141d241d341d441d541d641d741d841d941da41db
41dc41dd41de41df41e041e141e241e341e441e541e641e741e841e941ea
41eb41ec41ed41ee41ef41f041f141f241f341f441f541f641f741f841f9
41fa41fb41fc41fd41fe41ff420042014202420342044205420642074208
4209420a420b420c420d420e420f42104211421242134214421542164217
42184219421a421b421c421d421e421f4220422142224223422442254226
422742284229422a422b422c422d422e422f423042314232423342344235
4236423742384239423a423b423c423d423e423f42404241424242434244
42454246424742484249424a424b424c424d424e424f4250425142524253
425442554256425742584259425a425b425c425d425e425f426042614262
4263426442654266426742684269426a426b426c426d426e426f42704271
42724273427442754276427742784279427a427b427c427d427e427f4280
428142824283428442854286428742884289428a428b428c428d428e428f
4290429142924293429442954296429742984299429a429b429c429d429e
429f42a042a142a242a342a442a542a642a742a842a942aa42ab42ac42ad
42ae42af42b042b142b242b342b442b542b642b742b842b942ba42bb42bc
42bd42be42bf42c042c142c242c342c442c542c642c742c842c942ca42cb
42cc42cd42ce42cf42d042d142d242d342d442d542d642d742d842d942da
42db42dc42dd42de42df42e042e142e242e342e442e542e642e742e842e9
42ea42eb42ec42ed42ee42ef42f042f142f242f342f442f542f642f742f8
42f942fa42fb42fc42fd42fe42ff43004301430243034304430543064307
43084309430a430b430c430d430e430f4310431143124313431443154316
431743184319431a431b431c431d431e431f432043214322432343244325
4326432743284329432a432b432c432d432e432f43304331433243334334
43354336433743384339433a433b433c433d433e433f4340434143424343
434443454346434743484349434a434b434c434d434e434f435043514352
4353435443554356435743584359435a435b435c435d435e435f43604361
43624363436443654366436743684369436a436b436c436d436e436f4370
437143724373437443754376437743784379437a437b437c437d437e437f
4380438143824383438443854386438743884389438a438b438c438d438e
438f4390439143924393439443954396439743984399439a439b439c439d
439e439f43a043a143a243a343a443a543a643a743a843a943aa43ab43ac
43ad43ae43af43b043b143b243b343b443b543b643b743b843b943ba43bb
43bc43bd43be43bf43c043c143c243c343c443c543c643c743c843c943ca
43cb43cc43cd43ce43cf43d043d143d243d343d443d543d643d743d843d9
43da43db43dc43dd43de43df43e043e143e243e343e443e543e643e743e8
43e943ea43eb43ec43ed43ee43ef43f043f143f243f343f443f543f643f7
43f843f943fa43fb43fc43fd43fe43ff4400440144024403440444054406
440744084409440a440b440c440d440e440f441044114412441344144415
4416441744184419441a441b441c441d441e441f44204421442244234424
44254426442744284429442a442b442c442d442e442f4430443144324433
443444354436443744384439443a443b443c443d443e443f444044414442
4443444444454446444744484449444a444b444c444d444e444f44504451
44524453445444554456445744584459445a445b445c445d445e445f4460
446144624463446444654466446744684469446a446b446c446d446e446f
4470447144724473447444754476447744784479447a447b447c447d447e
447f4480448144824483448444854486448744884489448a448b448c448d
448e448f4490449144924493449444954496449744984499449a449b449c
449d449e449f44a044a144a244a344a444a544a644a744a844a944aa44ab
44ac44ad44ae44af44b044b144b244b344b444b544b644b744b844b944ba
44bb44bc44bd44be44bf44c044c144c244c344c444c544c644c744c844c9
44ca44cb44cc44cd44ce44cf44d044d144d244d344d444d544d644d744d8
44d944da44db44dc44dd44de44df44e044e144e244e344e444e544e644e7
44e844e944ea44eb44ec44ed44ee44ef44f044f144f244f344f444f544f6
44f744f844f944fa44fb44fc44fd44fe44ff450045014502450345044505
4506450745084509450a450b450c450d450e450f45104511451245134514
45154516451745184519451a451b451c451d451e451f4520452145224523
452445254526452745284529452a452b452c452d452e452f453045314532
4533453445354536453745384539453a453b453c453d453e453f45404541
45424543454445454546454745484549454a454b454c454d454e454f4550
455145524553455445554556455745584559455a455b455c455d455e455f
4560456145624563456445654566456745684569456a456b456c456d456e
456f4570457145724573457445754576457745784579457a457b457c457d
457e457f4580458145824583458445854586458745884589458a458b458c
458d458e458f4590459145924593459445954596459745984599459a459b
459c459d459e459f45a045a145a245a345a445a545a645a745a845a945aa
45ab45ac45ad45ae45af45b045b145b245b345b445b545b645b745b845b9
45ba45bb45bc45bd45be45bf45c045c145c245c345c445c545c645c745c8
45c945ca45cb45cc45cd45ce45cf45d045d145d245d345d445d545d645d7
45d845d945da45db45dc45dd45de45df45e045e145e245e345e445e545e6
45e745e845e945ea45eb45ec45ed45ee45ef45f045f145f245f345f445f5
45f645f745f845f945fa45fb45fc45fd45fe45ff46004601460246034604
46054606460746084609460a460b460c460d460e460f4610461146124613
461446154616461746184619461a461b461c461d461e461f462046214622
4623462446254626462746284629462a462b462c462d462e462f46304631
46324633463446354636463746384639463a463b463c463d463e463f4640
464146424643464446454646464746484649464a464b464c464d464e464f
4650465146524653465446554656465746584659465a465b465c465d465e
465f4660466146624663466446654666466746684669466a466b466c466d
466e466f4670467146724673467446754676467746784679467a467b467c
467d467e467f4680468146824683468446854686468746884689468a468b
468c468d468e468f4690469146924693469446954696469746984699469a
469b469c469d469e469f46a046a146a246a346a446a546a646a746a846a9
46aa46ab46ac46ad46ae46af46b046b146b246b346b446b546b646b746b8
46b946ba46bb46bc46bd46be46bf46c046c146c246c346c446c546c646c7
46c846c946ca46cb46cc46cd46ce46cf46d046d146d246d346d446d546d6
46d746d846d946da46db46dc46dd46de46df46e046e146e246e346e446e5
46e646e746e846e946ea46eb46ec46ed46ee46ef46f046f146f246f346f4
46f546f646f746f846f946fa46fb46fc46fd46fe46ff4700470147024703
470447054706470747084709470a470b470c470d470e470f471047114712
4713471447154716471747184719471a471b471c471d471e471f47204721
47224723472447254726472747284729472a472b472c472d472e472f4730
473147324733473447354736473747384739473a473b473c473d473e473f
4740474147424743474447454746474747484749474a474b474c474d474e
474f4750475147524753475447554756475747584759475a475b475c475d
475e475f4760476147624763476447654766476747684769476a476b476c
476d476e476f4770477147724773477447754776477747784779477a477b
477c477d477e477f4780478147824783478447854786478747884789478a
478b478c478d478e478f4790479147924793479447954796479747984799
479a479b479c479d479e479f47a047a147a247a347a447a547a647a747a8
47a947aa47ab47ac47ad47ae47af47b047b147b247b347b447b547b647b7
47b847b947ba47bb47bc47bd47be47bf47c047c147c247c347c447c547c6
47c747c847c947ca47cb47cc47cd47ce47cf47d047d147d247d347d447d5
47d647d747d847d947da47db47dc47dd47de47df47e047e147e247e347e4
47e547e647e747e847e947ea47eb47ec47ed47ee47ef47f047f147f247f3
47f447f547f647f747f847f947fa47fb47fc47fd47fe47ff480048014802
4803480448054806480748084809480a480b480c480d480e480f48104811
48124813481448154816481748184819481a481b481c481d481e481f4820
482148224823482448254826482748284829482a482b482c482d482e482f
4830483148324833483448354836483748384839483a483b483c483d483e
483f4840484148424843484448454846484748484849484a484b484c484d
484e484f4850485148524853485448554856485748584859485a485b485c
485d485e485f4860486148624863486448654866486748684869486a486b
486c486d486e486f4870487148724873487448754876487748784879487a
487b487c487d487e487f4880488148824883488448854886488748884889
488a488b488c488d488e488f489048914892489348944895489648974898
4899489a489b489c489d489e489f48a048a148a248a348a448a548a648a7
48a848a948aa48ab48ac48ad48ae48af48b048b148b248b348b448b548b6
48b748b848b948ba48bb48bc48bd48be48bf48c048c148c248c348c448c5
48c648c748c848c948ca48cb48cc48cd48ce48cf48d048d148d248d348d4
48d548d648d748d848d948da48db48dc48dd48de48df48e048e148e248e3
48e448e548e648e748e848e948ea48eb48ec48ed48ee48ef48f048f148f2
48f348f448f548f648f748f848f948fa48fb48fc48fd48fe48ff49004901
49024903490449054906490749084909490a490b490c490d490e490f4910
491149124913491449154916491749184919491a491b491c491d491e491f
4920492149224923492449254926492749284929492a492b492c492d492e
492f4930493149324933493449354936493749384939493a493b493c493d
493e493f4940494149424943494449454946494749484949494a494b494c
494d494e494f4950495149524953495449554956495749584959495a495b
495c495d495e495f4960496149624963496449654966496749684969496a
496b496c496d496e496f4970497149724973497449754976497749784979
497a497b497c497d497e497f498049814982498349844985498649874988
4989498a498b498c498d498e498f49904991499249934994499549964997
49984999499a499b499c499d499e499f49a049a149a249a349a449a549a6
49a749a849a949aa49ab49ac49ad49ae49af49b049b149b249b349b449b5
49b649b749b849b949ba49bb49bc49bd49be49bf49c049c149c249c349c4
49c549c649c749c849c949ca49cb49cc49cd49ce49cf49d049d149d249d3
49d449d549d649d749d849d949da49db49dc49dd49de49df49e049e149e2
49e349e449e549e649e749e849e949ea49eb49ec49ed49ee49ef49f049f1
49f249f349f449f549f649f749f849f949fa49fb49fc49fd49fe49ff4a00
4a014a024a034a044a054a064a074a084a094a0a4a0b4a0c4a0d4a0e4a0f
4a104a114a124a134a144a154a164a174a184a194a1a4a1b4a1c4a1d4a1e
4a1f4a204a214a224a234a244a254a264a274a284a294a2a4a2b4a2c4a2d
4a2e4a2f4a304a314a324a334a344a354a364a374a384a394a3a4a3b4a3c
4a3d4a3e4a3f4a404a414a424a434a444a454a464a474a484a494a4a4a4b
4a4c4a4d4a4e4a4f4a504a514a524a534a544a554a564a574a584a594a5a
4a5b4a5c4a5d4a5e4a5f4a604a614a624a634a644a654a664a674a684a69
4a6a4a6b4a6c4a6d4a6e4a6f4a704a714a724a734a744a754a764a774a78
4a794a7a4a7b4a7c4a7d4a7e4a7f4a804a814a824a834a844a854a864a87
4a884a894a8a4a8b4a8c4a8d4a8e4a8f4a904a914a924a934a944a954a96
4a974a984a994a9a4a9b4a9c4a9d4a9e4a9f4aa04aa14aa24aa34aa44aa5
4aa64aa74aa84aa94aaa4aab4aac4aad4aae4aaf4ab04ab14ab24ab34ab4
4ab54ab64ab74ab84ab94aba4abb4abc4abd4abe4abf4ac04ac14ac24ac3
4ac44ac54ac64ac74ac84ac94aca4acb4acc4acd4ace4acf4ad04ad14ad2
4ad34ad44ad54ad64ad74ad84ad94ada4adb4adc4add4ade4adf4ae04ae1
4ae24ae34ae44ae54ae64ae74ae84ae94aea4aeb4aec4aed4aee4aef4af0
4af14af24af34af44af54af64af74af84af94afa4afb4afc4afd4afe4aff
4b004b014b024b034b044b054b064b074b084b094b0a4b0b4b0c4b0d4b0e
4b0f4b104b114b124b134b144b154b164b174b184b194b1a4b1b4b1c4b1d
4b1e4b1f4b204b214b224b234b244b254b264b274b284b294b2a4b2b4b2c
4b2d4b2e4b2f4b304b314b324b334b344b354b364b374b384b394b3a4b3b
4b3c4b3d4b3e4b3f4b404b414b424b434b444b454b464b474b484b494b4a
4b4b4b4c4b4d4b4e4b4f4b504b514b524b534b544b554b564b574b584b59
4b5a4b5b4b5c4b5d4b5e4b5f4b604b614b624b634b644b654b664b674b68
4b694b6a4b6b4b6c4b6d4b6e4b6f4b704b714b724b734b744b754b764b77
4b784b794b7a4b7b4b7c4b7d4b7e4b7f4b804b814b824b834b844b854b86
4b874b884b894b8a4b8b4b8c4b8d4b8e4b8f4b904b914b924b934b944b95
4b964b974b984b994b9a4b9b4b9c4b9d4b9e4b9f4ba04ba14ba24ba34ba4
4ba54ba64ba74ba84ba94baa4bab4bac4bad4bae4baf4bb04bb14bb24bb3
4bb44bb54bb64bb74bb84bb94bba4bbb4bbc4bbd4bbe4bbf4bc04bc14bc2
4bc34bc44bc54bc64bc74bc84bc94bca4bcb4bcc4bcd4bce4bcf4bd04bd1
4bd24bd34bd44bd54bd64bd74bd84bd94bda4bdb4bdc4bdd4bde4bdf4be0
4be14be24be34be44be54be64be74be84be94bea4beb4bec4bed4bee4bef
4bf04bf14bf24bf34bf44bf54bf64bf74bf84bf94bfa4bfb4bfc4bfd4bfe
4bff4c004c014c024c034c044c054c064c074c084c094c0a4c0b4c0c4c0d
4c0e4c0f4c104c114c124c134c144c154c164c174c184c194c1a4c1b4c1c
4c1d4c1e4c1f4c204c214c224c234c244c254c264c274c284c294c2a4c2b
4c2c4c2d4c2e4c2f4c304c314c324c334c344c354c364c374c384c394c3a
4c3b4c3c4c3d4c3e4c3f4c404c414c424c434c444c454c464c474c484c49
4c4a4c4b4c4c4c4d4c4e4c4f4c504c514c524c534c544c554c564c574c58
4c594c5a4c5b4c5c4c5d4c5e4c5f4c604c614c624c634c644c654c664c67
4c684c694c6a4c6b4c6c4c6d4c6e4c6f4c704c714c724c734c744c754c76
4c774c784c794c7a4c7b4c7c4c7d4c7e4c7f4c804c814c824c834c844c85
4c864c874c884c894c8a4c8b4c8c4c8d4c8e4c8f4c904c914c924c934c94
4c954c964c974c984c994c9a4c9b4c9c4c9d4c9e4c9f4ca04ca14ca24ca3
4ca44ca54ca64ca74ca84ca94caa4cab4cac4cad4cae4caf4cb04cb14cb2
4cb34cb44cb54cb64cb74cb84cb94cba4cbb4cbc4cbd4cbe4cbf4cc04cc1
4cc24cc34cc44cc54cc64cc74cc84cc94cca4ccb4ccc4ccd4cce4ccf4cd0
4cd14cd24cd34cd44cd54cd64cd74cd84cd94cda4cdb4cdc4cdd4cde4cdf
4ce04ce14ce24ce34ce44ce54ce64ce74ce84ce94cea4ceb4cec4ced4cee
4cef4cf04cf14cf24cf34cf44cf54cf64cf74cf84cf94cfa4cfb4cfc4cfd
4cfe4cff4d004d014d024d034d044d054d064d074d084d094d0a4d0b4d0c
4d0d4d0e4d0f4d104d114d124d134d144d154d164d174d184d194d1a4d1b
4d1c4d1d4d1e4d1f4d204d214d224d234d244d254d264d274d284d294d2a
4d2b4d2c4d2d4d2e4d2f4d304d314d324d334d344d354d364d374d384d39
4d3a4d3b4d3c4d3d4d3e4d3f4d404d414d424d434d444d454d464d474d48
4d494d4a4d4b4d4c4d4d4d4e4d4f4d504d514d524d534d544d554d564d57
4d584d594d5a4d5b4d5c4d5d4d5e4d5f4d604d614d624d634d644d654d66
4d674d684d694d6a4d6b4d6c4d6d4d6e4d6f4d704d714d724d734d744d75
4d764d774d784d794d7a4d7b4d7c4d7d4d7e4d7f4d804d814d824d834d84
4d854d864d874d884d894d8a4d8b4d8c4d8d4d8e4d8f4d904d914d924d93
4d944d954d964d974d984d994d9a4d9b4d9c4d9d4d9e4d9f4da04da14da2
4da34da44da54da64da74da84da94daa4dab4dac4dad4dae4daf4db04db1
4db24db34db44db54db64db74db84db94dba4dbb4dbc4dbd4dbe4dbf4dc0
4dc14dc24dc34dc44dc54dc64dc74dc84dc94dca4dcb4dcc4dcd4dce4dcf
4dd04dd14dd24dd34dd44dd54dd64dd74dd84dd94dda4ddb4ddc4ddd4dde
4ddf4de04de14de24de34de44de54de64de74de84de94dea4deb4dec4ded
4dee4def4df04df14df24df34df44df54df64df74df84df94dfa4dfb4dfc
4dfd4dfe4dff4e004e014e024e034e044e054e064e074e084e094e0a4e0b
4e0c4e0d4e0e4e0f4e104e114e124e134e144e154e164e174e184e194e1a
4e1b4e1c4e1d4e1e4e1f4e204e214e224e234e244e254e264e274e284e29
4e2a4e2b4e2c4e2d4e2e4e2f4e304e314e324e334e344e354e364e374e38
4e394e3a4e3b4e3c4e3d4e3e4e3f4e404e414e424e434e444e454e464e47
4e484e494e4a4e4b4e4c4e4d4e4e4e4f4e504e514e524e534e544e554e56
4e574e584e594e5a4e5b4e5c4e5d4e5e4e5f4e604e614e624e634e644e65
4e664e674e684e694e6a4e6b4e6c4e6d4e6e4e6f4e704e714e724e734e74
4e754e764e774e784e794e7a4e7b4e7c4e7d4e7e4e7f4e804e814e824e83
4e844e854e864e874e884e894e8a4e8b4e8c4e8d4e8e4e8f4e904e914e92
4e934e944e954e964e974e984e994e9a4e9b4e9c4e9d4e9e4e9f4ea04ea1
4ea24ea34ea44ea54ea64ea74ea84ea94eaa4eab4eac4ead4eae4eaf4eb0
4eb14eb24eb34eb44eb54eb64eb74eb84eb94eba4ebb4ebc4ebd4ebe4ebf
4ec04ec14ec24ec34ec44ec54ec64ec74ec84ec94eca4ecb4ecc4ecd4ece
4ecf4ed04ed14ed24ed34ed44ed54ed64ed74ed84ed94eda4edb4edc4edd
4ede4edf4ee04ee14ee24ee34ee44ee54ee64ee74ee84ee94eea4eeb4eec
4eed4eee4eef4ef04ef14ef24ef34ef44ef54ef64ef74ef84ef94efa4efb
4efc4efd4efe4eff4f004f014f024f034f044f054f064f074f084f094f0a
4f0b4f0c4f0d4f0e4f0f4f104f114f124f134f144f154f164f174f184f19
4f1a4f1b4f1c4f1d4f1e4f1f4f204f214f224f234f244f254f264f274f28
4f294f2a4f2b4f2c4f2d4f2e4f2f4f304f314f324f334f344f354f364f37
4f384f394f3a4f3b4f3c4f3d4f3e4f3f4f404f414f424f434f444f454f46
4f474f484f494f4a4f4b4f4c4f4d4f4e4f4f4f504f514f524f534f544f55
4f564f574f584f594f5a4f5b4f5c4f5d4f5e4f5f4f604f614f624f634f64
4f654f664f674f684f694f6a4f6b4f6c4f6d4f6e4f6f4f704f714f724f73
4f744f754f764f774f784f794f7a4f7b4f7c4f7d4f7e4f7f4f804f814f82
4f834f844f854f864f874f884f894f8a4f8b4f8c4f8d4f8e4f8f4f904f91
4f924f934f944f954f964f974f984f994f9a4f9b4f9c4f9d4f9e4f9f4fa0
4fa14fa24fa34fa44fa54fa64fa74fa84fa94faa4fab4fac4fad4fae4faf
4fb04fb14fb24fb34fb44fb54fb64fb74fb84fb94fba4fbb4fbc4fbd4fbe
4fbf4fc04fc14fc24fc34fc44fc54fc64fc74fc84fc94fca4fcb4fcc4fcd
4fce4fcf4fd04fd14fd24fd34fd44fd54fd64fd74fd84fd94fda4fdb4fdc
4fdd4fde4fdf4fe04fe14fe24fe34fe44fe54fe64fe74fe84fe94fea4feb
4fec4fed4fee4fef4ff04ff14ff24ff34ff44ff54ff64ff74ff84ff94ffa
4ffb4ffc4ffd4ffe4fff5000500150025003500450055006500750085009
500a500b500c500d500e500f501050115012501350145015501650175018
5019501a501b501c501d501e501f50205021502250235024502550265027
50285029502a502b502c502d502e502f5030503150325033503450355036
503750385039503a503b503c503d503e503f504050415042504350445045
5046504750485049504a504b504c504d504e504f50505051505250535054
50555056505750585059505a505b505c505d505e505f5060506150625063
506450655066506750685069506a506b506c506d506e506f507050715072
5073507450755076507750785079507a507b507c507d507e507f50805081
50825083508450855086508750885089508a508b508c508d508e508f5090
509150925093509450955096509750985099509a509b509c509d509e509f
50a050a150a250a350a450a550a650a750a850a950aa50ab50ac50ad50ae
50af50b050b150b250b350b450b550b650b750b850b950ba50bb50bc50bd
50be50bf50c050c150c250c350c450c550c650c750c850c950ca50cb50cc
50cd50ce50cf50d050d150d250d350d450d550d650d750d850d950da50db
50dc50dd50de50df50e050e150e250e350e450e550e650e750e850e950ea
50eb50ec50ed50ee50ef50f050f150f250f350f450f550f650f750f850f9
50fa50fb50fc50fd50fe50ff510051015102510351045105510651075108
5109510a510b510c510d510e510f51105111511251135114511551165117
51185119511a511b511c511d511e511f5120512151225123512451255126
512751285129512a512b512c512d512e512f513051315132513351345135
5136513751385139513a513b513c513d513e513f51405141514251435144
51455146514751485149514a514b514c514d514e514f5150515151525153
515451555156515751585159515a515b515c515d515e515f516051615162
5163516451655166516751685169516a516b516c516d516e516f51705171
51725173517451755176517751785179517a517b517c517d517e517f5180
518151825183518451855186518751885189518a518b518c518d518e518f
5190519151925193519451955196519751985199519a519b519c519d519e
519f51a051a151a251a351a451a551a651a751a851a951aa51ab51ac51ad
51ae51af51b051b151b251b351b451b551b651b751b851b951ba51bb51bc
51bd51be51bf51c051c151c251c351c451c551c651c751c851c951ca51cb
51cc51cd51ce51cf51d051d151d251d351d451d551d651d751d851d951da
51db51dc51dd51de51df51e051e151e251e351e451e551e651e751e851e9
51ea51eb51ec51ed51ee51ef51f051f151f251f351f451f551f651f751f8
51f951fa51fb51fc51fd51fe51ff52005201520252035204520552065207
52085209520a520b520c520d520e520f5210521152125213521452155216
521752185219521a521b521c521d521e521f522052215222522352245225
5226522752285229522a522b522c522d522e522f52305231523252335234
52355236523752385239523a523b523c523d523e523f5240524152425243
524452455246524752485249524a524b524c524d524e524f525052515252
5253525452555256525752585259525a525b525c525d525e525f52605261
52625263526452655266526752685269526a526b526c526d526e526f5270
527152725273527452755276527752785279527a527b527c527d527e527f
5280528152825283528452855286528752885289528a528b528c528d528e
528f5290529152925293529452955296529752985299529a529b529c529d
529e529f52a052a152a252a352a452a552a652a752a852a952aa52ab52ac
52ad52ae52af52b052b152b252b352b452b552b652b752b852b952ba52bb
52bc52bd52be52bf52c052c152c252c352c452c552c652c752c852c952ca
52cb52cc52cd52ce52cf52d052d152d252d352d452d552d652d752d852d9
52da52db52dc52dd52de52df52e052e152e252e352e452e552e652e752e8
52e952ea52eb52ec52ed52ee52ef52f052f152f252f352f452f552f652f7
52f852f952fa52fb52fc52fd52fe52ff5300530153025303530453055306
530753085309530a530b530c530d530e530f531053115312531353145315
5316531753185319531a531b531c531d531e531f53205321532253235324
53255326532753285329532a532b532c532d532e532f5330533153325333
533453355336533753385339533a533b533c533d533e533f534053415342
5343534453455346534753485349534a534b534c534d534e534f53505351
53525353535453555356535753585359535a535b535c535d535e535f5360
536153625363536453655366536753685369536a536b536c536d536e536f
5370537153725373537453755376537753785379537a537b537c537d537e
537f5380538153825383538453855386538753885389538a538b538c538d
538e538f5390539153925393539453955396539753985399539a539b539c
539d539e539f53a053a153a253a353a453a553a653a753a853a953aa53ab
53ac53ad53ae53af53b053b153b253b353b453b553b653b753b853b953ba
53bb53bc53bd53be53bf53c053c153c253c353c453c553c653c753c853c9
53ca53cb53cc53cd53ce53cf53d053d153d253d353d453d553d653d753d8
53d953da53db53dc53dd53de53df53e053e153e253e353e453e553e653e7
53e853e953ea53eb53ec53ed53ee53ef53f053f153f253f353f453f553f6
53f753f853f953fa53fb53fc53fd53fe53ff540054015402540354045405
5406540754085409540a540b540c540d540e540f54105411541254135414
54155416541754185419541a541b541c541d541e541f5420542154225423
542454255426542754285429542a542b542c542d542e542f543054315432
5433543454355436543754385439543a543b543c543d543e543f54405441
54425443544454455446544754485449544a544b544c544d544e544f5450
545154525453545454555456545754585459545a545b545c545d545e545f
5460546154625463546454655466546754685469546a546b546c546d546e
546f5470547154725473547454755476547754785479547a547b547c547d
547e547f5480548154825483548454855486548754885489548a548b548c
548d548e548f5490549154925493549454955496549754985499549a549b
549c549d549e549f54a054a154a254a354a454a554a654a754a854a954aa
54ab54ac54ad54ae54af54b054b154b254b354b454b554b654b754b854b9
54ba54bb54bc54bd54be54bf54c054c154c254c354c454c554c654c754c8
54c954ca54cb54cc54cd54ce54cf54d054d154d254d354d454d554d654d7
54d854d954da54db54dc54dd54de54df54e054e154e254e354e454e554e6
54e754e854e954ea54eb54ec54ed54ee54ef54f054f154f254f354f454f5
54f654f754f854f954fa54fb54fc54fd54fe54ff55005501550255035504
55055506550755085509550a550b550c550d550e550f5510551155125513
551455155516551755185519551a551b551c551d551e551f552055215522
5523552455255526552755285529552a552b552c552d552e552f55305531
55325533553455355536553755385539553a553b553c553d553e553f5540
554155425543554455455546554755485549554a554b554c554d554e554f
5550555155525553555455555556555755585559555a555b555c555d555e
555f5560556155625563556455655566556755685569556a556b556c556d
556e556f5570557155725573557455755576557755785579557a557b557c
557d557e557f5580558155825583558455855586558755885589558a558b
558c558d558e558f5590559155925593559455955596559755985599559a
559b559c559d559e559f55a055a155a255a355a455a555a655a755a855a9
55aa55ab55ac55ad55ae55af55b055b155b255b355b455b555b655b755b8
55b955ba55bb55bc55bd55be55bf55c055c155c255c355c455c555c655c7
55c855c955ca55cb55cc55cd55ce55cf55d055d155d255d355d455d555d6
55d755d855d955da55db55dc55dd55de55df55e055e155e255e355e455e5
55e655e755e855e955ea55eb55ec55ed55ee55ef55f055f155f255f355f4
55f555f655f755f855f955fa55fb55fc55fd55fe55ff5600560156025603
560456055606560756085609560a560b560c560d560e560f561056115612
5613561456155616561756185619561a561b561c561d561e561f56205621
56225623562456255626562756285629562a562b562c562d562e562f5630
563156325633563456355636563756385639563a563b563c563d563e563f
5640564156425643564456455646564756485649564a564b564c564d564e
564f5650565156525653565456555656565756585659565a565b565c565d
565e565f5660566156625663566456655666566756685669566a566b566c
566d566e566f5670567156725673567456755676567756785679567a567b
567c567d567e567f5680568156825683568456855686568756885689568a
568b568c568d568e568f5690569156925693569456955696569756985699
569a569b569c569d569e569f56a056a156a256a356a456a556a656a756a8
56a956aa56ab56ac56ad56ae56af56b056b156b256b356b456b556b656b7
56b856b956ba56bb56bc56bd56be56bf56c056c156c256c356c456c556c6
56c756c856c956ca56cb56cc56cd56ce56cf56d056d156d256d356d456d5
56d656d756d856d956da56db56dc56dd56de56df56e056e156e256e356e4
56e556e656e756e856e956ea56eb56ec56ed56ee56ef56f056f156f256f3
56f456f556f656f756f856f956fa56fb56fc56fd56fe56ff570057015702
5703570457055706570757085709570a570b570c570d570e570f57105711
57125713571457155716571757185719571a571b571c571d571e571f5720
572157225723572457255726572757285729572a572b572c572d572e572f
5730573157325733573457355736573757385739573a573b573c573d573e
573f5740574157425743574457455746574757485749574a574b574c574d
574e574f5750575157525753575457555756575757585759575a575b575c
575d575e575f5760576157625763576457655766576757685769576a576b
576c576d576e576f5770577157725773577457755776577757785779577a
577b577c577d577e577f5780578157825783578457855786578757885789
578a578b578c578d578e578f579057915792579357945795579657975798
5799579a579b579c579d579e579f57a057a157a257a357a457a557a657a7
57a857a957aa57ab57ac57ad57ae57af57b057b157b257b357b457b557b6
57b757b857b957ba57bb57bc57bd57be57bf57c057c157c257c357c457c5
57c657c757c857c957ca57cb57cc57cd57ce57cf57d057d157d257d357d4
57d557d657d757d857d957da57db57dc57dd57de57df57e057e157e257e3
57e457e557e657e757e857e957ea57eb57ec57ed57ee57ef57f057f157f2
57f357f457f557f657f757f857f957fa57fb57fc57fd57fe57ff58005801
58025803580458055806580758085809580a580b580c580d580e580f5810
581158125813581458155816581758185819581a581b581c581d581e581f
5820582158225823582458255826582758285829582a582b582c582d582e
582f5830583158325833583458355836583758385839583a583b583c583d
583e583f5840584158425843584458455846584758485849584a584b584c
584d584e584f5850585158525853585458555856585758585859585a585b
585c585d585e585f5860586158625863586458655866586758685869586a
586b586c586d586e586f5870587158725873587458755876587758785879
587a587b587c587d587e587f588058815882588358845885588658875888
5889588a588b588c588d588e588f58905891589258935894589558965897
58985899589a589b589c589d589e589f58a058a158a258a358a458a558a6
58a758a858a958aa58ab58ac58ad58ae58af58b058b158b258b358b458b5
58b658b758b858b958ba58bb58bc58bd58be58bf58c058c158c258c358c4
58c558c658c758c858c958ca58cb58cc58cd58ce58cf58d058d158d258d3
58d458d558d658d758d858d958da58db58dc58dd58de58df58e058e158e2
58e358e458e558e658e758e858e958ea58eb58ec58ed58ee58ef58f058f1
58f258f358f458f558f658f758f858f958fa58fb58fc58fd58fe58ff5900
590159025903590459055906590759085909590a590b590c590d590e590f
5910591159125913591459155916591759185919591a591b591c591d591e
591f5920592159225923592459255926592759285929592a592b592c592d
592e592f5930593159325933593459355936593759385939593a593b593c
593d593e593f5940594159425943594459455946594759485949594a594b
594c594d594e594f5950595159525953595459555956595759585959595a
595b595c595d595e595f5960596159625963596459655966596759685969
596a596b596c596d596e596f597059715972597359745975597659775978
5979597a597b597c597d597e597f59805981598259835984598559865987
59885989598a598b598c598d598e598f5990599159925993599459955996
599759985999599a599b599c599d599e599f59a059a159a259a359a459a5
59a659a759a859a959aa59ab59ac59ad59ae59af59b059b159b259b359b4
59b559b659b759b859b959ba59bb59bc59bd59be59bf59c059c159c259c3
59c459c559c659c759c859c959ca59cb59cc59cd59ce59cf59d059d159d2
59d359d459d559d659d759d859d959da59db59dc59dd59de59df59e059e1
59e259e359e459e559e659e759e859e959ea59eb59ec59ed59ee59ef59f0
59f159f259f359f459f559f659f759f859f959fa59fb59fc59fd59fe59ff
5a005a015a025a035a045a055a065a075a085a095a0a5a0b5a0c5a0d5a0e
5a0f5a105a115a125a135a145a155a165a175a185a195a1a5a1b5a1c5a1d
5a1e5a1f5a205a215a225a235a245a255a265a275a285a295a2a5a2b5a2c
5a2d5a2e5a2f5a305a315a325a335a345a355a365a375a385a395a3a5a3b
5a3c5a3d5a3e5a3f5a405a415a425a435a445a455a465a475a485a495a4a
5a4b5a4c5a4d5a4e5a4f5a505a515a525a535a545a555a565a575a585a59
5a5a5a5b5a5c5a5d5a5e5a5f5a605a615a625a635a645a655a665a675a68
5a695a6a5a6b5a6c5a6d5a6e5a6f5a705a715a725a735a745a755a765a77
5a785a795a7a5a7b5a7c5a7d5a7e5a7f5a805a815a825a835a845a855a86
5a875a885a895a8a5a8b5a8c5a8d5a8e5a8f5a905a915a925a935a945a95
5a965a975a985a995a9a5a9b5a9c5a9d5a9e5a9f5aa05aa15aa25aa35aa4
5aa55aa65aa75aa85aa95aaa5aab5aac5aad5aae5aaf5ab05ab15ab25ab3
5ab45ab55ab65ab75ab85ab95aba5abb5abc5abd5abe5abf5ac05ac15ac2
5ac35ac45ac55ac65ac75ac85ac95aca5acb5acc5acd5ace5acf5ad05ad1
5ad25ad35ad45ad55ad65ad75ad85ad95ada5adb5adc5add5ade5adf5ae0
5ae15ae25ae35ae45ae55ae65ae75ae85ae95aea5aeb5aec5aed5aee5aef
5af05af15af25af35af45af55af65af75af85af95afa5afb5afc5afd5afe
5aff5b005b015b025b035b045b055b065b075b085b095b0a5b0b5b0c5b0d
5b0e5b0f5b105b115b125b135b145b155b165b175b185b195b1a5b1b5b1c
5b1d5b1e5b1f5b205b215b225b235b245b255b265b275b285b295b2a5b2b
5b2c5b2d5b2e5b2f5b305b315b325b335b345b355b365b375b385b395b3a
5b3b5b3c5b3d5b3e5b3f5b405b415b425b435b445b455b465b475b485b49
5b4a5b4b5b4c5b4d5b4e5b4f5b505b515b525b535b545b555b565b575b58
5b595b5a5b5b5b5c5b5d5b5e5b5f5b605b615b625b635b645b655b665b67
5b685b695b6a5b6b5b6c5b6d5b6e5b6f5b705b715b725b735b745b755b76
5b775b785b795b7a5b7b5b7c5b7d5b7e5b7f5b805b815b825b835b845b85
5b865b875b885b895b8a5b8b5b8c5b8d5b8e5b8f5b905b915b925b935b94
5b955b965b975b985b995b9a5b9b5b9c5b9d5b9e5b9f5ba05ba15ba25ba3
5ba45ba55ba65ba75ba85ba95baa5bab5bac5bad5bae5baf5bb05bb15bb2
5bb35bb45bb55bb65bb75bb85bb95bba5bbb5bbc5bbd5bbe5bbf5bc05bc1
5bc25bc35bc45bc55bc65bc75bc85bc95bca5bcb5bcc5bcd5bce5bcf5bd0
5bd15bd25bd35bd45bd55bd65bd75bd85bd95bda5bdb5bdc5bdd5bde5bdf
5be05be15be25be35be45be55be65be75be85be95bea5beb5bec5bed5bee
5bef5bf05bf15bf25bf35bf45bf55bf65bf75bf85bf95bfa5bfb5bfc5bfd
5bfe5bff5c005c015c025c035c045c055c065c075c085c095c0a5c0b5c0c
5c0d5c0e5c0f5c105c115c125c135c145c155c165c175c185c195c1a5c1b
5c1c5c1d5c1e5c1f5c205c215c225c235c245c255c265c275c285c295c2a
5c2b5c2c5c2d5c2e5c2f5c305c315c325c335c345c355c365c375c385c39
5c3a5c3b5c3c5c3d5c3e5c3f5c405c415c425c435c445c455c465c475c48
5c495c4a5c4b5c4c5c4d5c4e5c4f5c505c515c525c535c545c555c565c57
5c585c595c5a5c5b5c5c5c5d5c5e5c5f5c605c615c625c635c645c655c66
5c675c685c695c6a5c6b5c6c5c6d5c6e5c6f5c705c715c725c735c745c75
5c765c775c785c795c7a5c7b5c7c5c7d5c7e5c7f5c805c815c825c835c84
5c855c865c875c885c895c8a5c8b5c8c5c8d5c8e5c8f5c905c915c925c93
5c945c955c965c975c985c995c9a5c9b5c9c5c9d5c9e5c9f5ca05ca15ca2
5ca35ca45ca55ca65ca75ca85ca95caa5cab5cac5cad5cae5caf5cb05cb1
5cb25cb35cb45cb55cb65cb75cb85cb95cba5cbb5cbc5cbd5cbe5cbf5cc0
5cc15cc25cc35cc45cc55cc65cc75cc85cc95cca5ccb5ccc5ccd5cce5ccf
5cd05cd15cd25cd35cd45cd55cd65cd75cd85cd95cda5cdb5cdc5cdd5cde
5cdf5ce05ce15ce25ce35ce45ce55ce65ce75ce85ce95cea5ceb5cec5ced
5cee5cef5cf05cf15cf25cf35cf45cf55cf65cf75cf85cf95cfa5cfb5cfc
5cfd5cfe5cff5d005d015d025d035d045d055d065d075d085d095d0a5d0b
5d0c5d0d5d0e5d0f5d105d115d125d135d145d155d165d175d185d195d1a
5d1b5d1c5d1d5d1e5d1f5d205d215d225d235d245d255d265d275d285d29
5d2a5d2b5d2c5d2d5d2e5d2f5d305d315d325d335d345d355d365d375d38
5d395d3a5d3b5d3c5d3d5d3e5d3f5d405d415d425d435d445d455d465d47
5d485d495d4a5d4b5d4c5d4d5d4e5d4f5d505d515d525d535d545d555d56
5d575d585d595d5a5d5b5d5c5d5d5d5e5d5f5d605d615d625d635d645d65
5d665d675d685d695d6a5d6b5d6c5d6d5d6e5d6f5d705d715d725d735d74
5d755d765d775d785d795d7a5d7b5d7c5d7d5d7e5d7f5d805d815d825d83
5d845d855d865d875d885d895d8a5d8b5d8c5d8d5d8e5d8f5d905d915d92
5d935d945d955d965d975d985d995d9a5d9b5d9c5d9d5d9e5d9f5da05da1
5da25da35da45da55da65da75da85da95daa5dab5dac5dad5dae5daf5db0
5db15db25db35db45db55db65db75db85db95dba5dbb5dbc5dbd5dbe5dbf
5dc05dc15dc25dc35dc45dc55dc65dc75dc85dc95dca5dcb5dcc5dcd5dce
5dcf5dd05dd15dd25dd35dd45dd55dd65dd75dd85dd95dda5ddb5ddc5ddd
5dde5ddf5de05de15de25de35de45de55de65de75de85de95dea5deb5dec
5ded5dee5def5df05df15df25df35df45df55df65df75df85df95dfa5dfb
5dfc5dfd5dfe5dff5e005e015e025e035e045e055e065e075e085e095e0a
5e0b5e0c5e0d5e0e5e0f5e105e115e125e135e145e155e165e175e185e19
5e1a5e1b5e1c5e1d5e1e5e1f5e205e215e225e235e245e255e265e275e28
5e295e2a5e2b5e2c5e2d5e2e5e2f5e305e315e325e335e345e355e365e37
5e385e395e3a5e3b5e3c5e3d5e3e5e3f5e405e415e425e435e445e455e46
5e475e485e495e4a5e4b5e4c5e4d5e4e5e4f5e505e515e525e535e545e55
5e565e575e585e595e5a5e5b5e5c5e5d5e5e5e5f5e605e615e625e635e64
5e655e665e675e685e695e6a5e6b5e6c5e6d5e6e5e6f5e705e715e725e73
5e745e755e765e775e785e795e7a5e7b5e7c5e7d5e7e5e7f5e805e815e82
5e835e845e855e865e875e885e895e8a5e8b5e8c5e8d5e8e5e8f5e905e91
5e925e935e945e955e965e975e985e995e9a5e9b5e9c5e9d5e9e5e9f5ea0
5ea15ea25ea35ea45ea55ea65ea75ea85ea95eaa5eab5eac5ead5eae5eaf
5eb05eb15eb25eb35eb45eb55eb65eb75eb85eb95eba5ebb5ebc5ebd5ebe
5ebf5ec05ec15ec25ec35ec45ec55ec65ec75ec85ec95eca5ecb5ecc5ecd
5ece5ecf5ed05ed15ed25ed35ed45ed55ed65ed75ed85ed95eda5edb5edc
5edd5ede5edf5ee05ee15ee25ee35ee45ee55ee65ee75ee85ee95eea5eeb
5eec5eed5eee5eef5ef05ef15ef25ef35ef45ef55ef65ef75ef85ef95efa
5efb5efc5efd5efe5eff5f005f015f025f035f045f055f065f075f085f09
5f0a5f0b5f0c5f0d5f0e5f0f5f105f115f125f135f145f155f165f175f18
5f195f1a5f1b5f1c5f1d5f1e5f1f5f205f215f225f235f245f255f265f27
5f285f295f2a5f2b5f2c5f2d5f2e5f2f5f305f315f325f335f345f355f36
5f375f385f395f3a5f3b5f3c5f3d5f3e5f3f5f405f415f425f435f445f45
5f465f475f485f495f4a5f4b5f4c5f4d5f4e5f4f5f505f515f525f535f54
5f555f565f575f585f595f5a5f5b5f5c5f5d5f5e5f5f5f605f615f625f63
5f645f655f665f675f685f695f6a5f6b5f6c5f6d5f6e5f6f5f705f715f72
5f735f745f755f765f775f785f795f7a5f7b5f7c5f7d5f7e5f7f5f805f81
5f825f835f845f855f865f875f885f895f8a5f8b5f8c5f8d5f8e5f8f5f90
5f915f925f935f945f955f965f975f985f995f9a5f9b5f9c5f9d5f9e5f9f
5fa05fa15fa25fa35fa45fa55fa65fa75fa85fa95faa5fab5fac5fad5fae
5faf5fb05fb15fb25fb35fb45fb55fb65fb75fb85fb95fba5fbb5fbc5fbd
5fbe5fbf5fc05fc15fc25fc35fc45fc55fc65fc75fc85fc95fca5fcb5fcc
5fcd5fce5fcf5fd05fd15fd25fd35fd45fd55fd65fd75fd85fd95fda5fdb
5fdc5fdd5fde5fdf5fe05fe15fe25fe35fe45fe55fe65fe75fe85fe95fea
5feb5fec5fed5fee5fef5ff05ff15ff25ff35ff45ff55ff65ff75ff85ff9
5ffa5ffb5ffc5ffd5ffe5fff600060016002600360046005600660076008
6009600a600b600c600d600e600f60106011601260136014601560166017
60186019601a601b601c601d601e601f6020602160226023602460256026
602760286029602a602b602c602d602e602f603060316032603360346035
6036603760386039603a603b603c603d603e603f60406041604260436044
60456046604760486049604a604b604c604d604e604f6050605160526053
605460556056605760586059605a605b605c605d605e605f606060616062
6063606460656066606760686069606a606b606c606d606e606f60706071
60726073607460756076607760786079607a607b607c607d607e607f6080
608160826083608460856086608760886089608a608b608c608d608e608f
6090609160926093609460956096609760986099609a609b609c609d609e
609f60a060a160a260a360a460a560a660a760a860a960aa60ab60ac60ad
60ae60af60b060b160b260b360b460b560b660b760b860b960ba60bb60bc
60bd60be60bf60c060c160c260c360c460c560c660c760c860c960ca60cb
60cc60cd60ce60cf60d060d160d260d360d460d560d660d760d860d960da
60db60dc60dd60de60df60e060e160e260e360e460e560e660e760e860e9
60ea60eb60ec60ed60ee60ef60f060f160f260f360f460f560f660f760f8
60f960fa60fb60fc60fd60fe60ff61006101610261036104610561066107
61086109610a610b610c610d610e610f6110611161126113611461156116
611761186119611a611b611c611d611e611f612061216122612361246125
6126612761286129612a612b612c612d612e612f61306131613261336134
61356136613761386139613a613b613c613d613e613f6140614161426143
614461456146614761486149614a614b614c614d614e614f615061516152
6153615461556156615761586159615a615b615c615d615e615f61606161
61626163616461656166616761686169616a616b616c616d616e616f6170
617161726173617461756176617761786179617a617b617c617d617e617f
6180618161826183618461856186618761886189618a618b618c618d618e
618f6190619161926193619461956196619761986199619a619b619c619d
619e619f61a061a161a261a361a461a561a661a761a861a961aa61ab61ac
61ad61ae61af61b061b161b261b361b461b561b661b761b861b961ba61bb
61bc61bd61be61bf61c061c161c261c361c461c561c661c761c861c961ca
61cb61cc61cd61ce61cf61d061d161d261d361d461d561d661d761d861d9
61da61db61dc61dd61de61df61e061e161e261e361e461e561e661e761e8
61e961ea61eb61ec61ed61ee61ef61f061f161f261f361f461f561f661f7
61f861f961fa61fb61fc61fd61fe61ff6200620162026203620462056206
620762086209620a620b620c620d620e620f621062116212621362146215
6216621762186219621a621b621c621d621e621f62206221622262236224
62256226622762286229622a622b622c622d622e622f6230623162326233
623462356236623762386239623a623b623c623d623e623f624062416242
6243624462456246624762486249624a624b624c624d624e624f62506251
62526253625462556256625762586259625a625b625c625d625e625f6260
626162626263626462656266626762686269626a626b626c626d626e626f
6270627162726273627462756276627762786279627a627b627c627d627e
627f6280628162826283628462856286628762886289628a628b628c628d
628e628f6290629162926293629462956296629762986299629a629b629c
629d629e629f62a062a162a262a362a462a562a662a762a862a962aa62ab
62ac62ad62ae62af62b062b162b262b362b462b562b662b762b862b962ba
62bb62bc62bd62be62bf62c062c162c262c362c462c562c662c762c862c9
62ca62cb62cc62cd62ce62cf62d062d162d262d362d462d562d662d762d8
62d962da62db62dc62dd62de62df62e062e162e262e362e462e562e662e7
62e862e962ea62eb62ec62ed62ee62ef62f062f162f262f362f462f562f6
62f762f862f962fa62fb62fc62fd62fe62ff630063016302630363046305
6306630763086309630a630b630c630d630e630f63106311631263136314
63156316631763186319631a631b631c631d631e631f6320632163226323
632463256326632763286329632a632b632c632d632e632f633063316332
6333633463356336633763386339633a633b633c633d633e633f63406341
63426343634463456346634763486349634a634b634c634d634e634f6350
635163526353635463556356635763586359635a635b635c635d635e635f
6360636163626363636463656366636763686369636a636b636c636d636e
636f6370637163726373637463756376637763786379637a637b637c637d
637e637f6380638163826383638463856386638763886389638a638b638c
638d638e638f6390639163926393639463956396639763986399639a639b
639c639d639e639f63a063a163a263a363a463a563a663a763a863a963aa
63ab63ac63ad63ae63af63b063b163b263b363b463b563b663b763b863b9
63ba63bb63bc63bd63be63bf63c063c163c263c363c463c563c663c763c8
63c963ca63cb63cc63cd63ce63cf63d063d163d263d363d463d563d663d7
63d863d963da63db63dc63dd63de63df63e063e163e263e363e463e563e6
63e763e863e963ea63eb63ec63ed63ee63ef63f063f163f263f363f463f5
63f663f763f863f963fa63fb63fc63fd63fe63ff64006401640264036404
64056406640764086409640a640b640c640d640e640f6410641164126413
641464156416641764186419641a641b641c641d641e641f642064216422
6423642464256426642764286429642a642b642c642d642e642f64306431
64326433643464356436643764386439643a643b643c643d643e643f6440
644164426443644464456446644764486449644a644b644c644d644e644f
6450645164526453645464556456645764586459645a645b645c645d645e
645f6460646164626463646464656466646764686469646a646b646c646d
646e646f6470647164726473647464756476647764786479647a647b647c
647d647e647f6480648164826483648464856486648764886489648a648b
648c648d648e648f6490649164926493649464956496649764986499649a
649b649c649d649e649f64a064a164a264a364a464a564a664a764a864a9
64aa64ab64ac64ad64ae64af64b064b164b264b364b464b564b664b764b8
64b964ba64bb64bc64bd64be64bf64c064c164c264c364c464c564c664c7
64c864c964ca64cb64cc64cd64ce64cf64d064d164d264d364d464d564d6
64d764d864d964da64db64dc64dd64de64df64e064e164e264e364e464e5
64e664e764e864e964ea64eb64ec64ed64ee64ef64f064f164f264f364f4
64f564f664f764f864f964fa64fb64fc64fd64fe64ff6500650165026503
650465056506650765086509650a650b650c650d650e650f651065116512
6513651465156516651765186519651a651b651c651d651e651f65206521
65226523652465256526652765286529652a652b652c652d652e652f6530
653165326533653465356536653765386539653a653b653c653d653e653f
6540654165426543654465456546654765486549654a654b654c654d654e
654f6550655165526553655465556556655765586559655a655b655c655d
655e655f6560656165626563656465656566656765686569656a656b656c
656d656e656f6570657165726573657465756576657765786579657a657b
657c657d657e657f6580658165826583658465856586658765886589658a
658b658c658d658e658f6590659165926593659465956596659765986599
659a659b659c659d659e659f65a065a165a265a365a465a565a665a765a8
65a965aa65ab65ac65ad65ae65af65b065b165b265b365b465b565b665b7
65b865b965ba65bb65bc65bd65be65bf65c065c165c265c365c465c565c6
65c765c865c965ca65cb65cc65cd65ce65cf65d065d165d265d365d465d5
65d665d765d865d965da65db65dc65dd65de65df65e065e165e265e365e4
65e565e665e765e865e965ea65eb65ec65ed65ee65ef65f065f165f265f3
65f465f565f665f765f865f965fa65fb65fc65fd65fe65ff660066016602
6603660466056606660766086609660a660b660c660d660e660f66106611
66126613661466156616661766186619661a661b661c661d661e661f6620
662166226623662466256626662766286629662a662b662c662d662e662f
6630663166326633663466356636663766386639663a663b663c663d663e
663f6640664166426643664466456646664766486649664a664b664c664d
664e664f6650665166526653665466556656665766586659665a665b665c
665d665e665f6660666166626663666466656666666766686669666a666b
666c666d666e666f6670667166726673667466756676667766786679667a
667b667c667d667e667f6680668166826683668466856686668766886689
668a668b668c668d668e668f669066916692669366946695669666976698
6699669a669b669c669d669e669f66a066a166a266a366a466a566a666a7
66a866a966aa66ab66ac66ad66ae66af66b066b166b266b366b466b566b6
66b766b866b966ba66bb66bc66bd66be66bf66c066c166c266c366c466c5
66c666c766c866c966ca66cb66cc66cd66ce66cf66d066d166d266d366d4
66d566d666d766d866d966da66db66dc66dd66de66df66e066e166e266e3
66e466e566e666e766e866e966ea66eb66ec66ed66ee66ef66f066f166f2
66f366f466f566f666f766f866f966fa66fb66fc66fd66fe66ff67006701
67026703670467056706670767086709670a670b670c670d670e670f6710
671167126713671467156716671767186719671a671b671c671d671e671f
6720672167226723672467256726672767286729672a672b672c672d672e
672f6730673167326733673467356736673767386739673a673b673c673d
673e673f6740674167426743674467456746674767486749674a674b674c
674d674e674f6750675167526753675467556756675767586759675a675b
675c675d675e675f6760676167626763676467656766676767686769676a
676b676c676d676e676f6770677167726773677467756776677767786779
677a677b677c677d677e677f678067816782678367846785678667876788
6789678a678b678c678d678e678f67906791679267936794679567966797
67986799679a679b679c679d679e679f67a067a167a267a367a467a567a6
67a767a867a967aa67ab67ac67ad67ae67af67b067b167b267b367b467b5
67b667b767b867b967ba67bb67bc67bd67be67bf67c067c167c267c367c4
67c567c667c767c867c967ca67cb67cc67cd67ce67cf67d067d167d267d3
67d467d567d667d767d867d967da67db67dc67dd67de67df67e067e167e2
67e367e467e567e667e767e867e967ea67eb67ec67ed67ee67ef67f067f1
67f267f367f467f567f667f767f867f967fa67fb67fc67fd67fe67ff6800
680168026803680468056806680768086809680a680b680c680d680e680f
6810681168126813681468156816681768186819681a681b681c681d681e
681f6820682168226823682468256826682768286829682a682b682c682d
682e682f6830683168326833683468356836683768386839683a683b683c
683d683e683f6840684168426843684468456846684768486849684a684b
684c684d684e684f6850685168526853685468556856685768586859685a
685b685c685d685e685f6860686168626863686468656866686768686869
686a686b686c686d686e686f687068716872687368746875687668776878
6879687a687b687c687d687e687f68806881688268836884688568866887
68886889688a688b688c688d688e688f6890689168926893689468956896
689768986899689a689b689c689d689e689f68a068a168a268a368a468a5
68a668a768a868a968aa68ab68ac68ad68ae68af68b068b168b268b368b4
68b568b668b768b868b968ba68bb68bc68bd68be68bf68c068c168c268c3
68c468c568c668c768c868c968ca68cb68cc68cd68ce68cf68d068d168d2
68d368d468d568d668d768d868d968da68db68dc68dd68de68df68e068e1
68e268e368e468e568e668e768e868e968ea68eb68ec68ed68ee68ef68f0
68f168f268f368f468f568f668f768f868f968fa68fb68fc68fd68fe68ff
6900690169026903690469056906690769086909690a690b690c690d690e
690f6910691169126913691469156916691769186919691a691b691c691d
691e691f6920692169226923692469256926692769286929692a692b692c
692d692e692f6930693169326933693469356936693769386939693a693b
693c693d693e693f6940694169426943694469456946694769486949694a
694b694c694d694e694f6950695169526953695469556956695769586959
695a695b695c695d695e695f696069616962696369646965696669676968
6969696a696b696c696d696e696f69706971697269736974697569766977
69786979697a697b697c697d697e697f6980698169826983698469856986
698769886989698a698b698c698d698e698f699069916992699369946995
6996699769986999699a699b699c699d699e699f69a069a169a269a369a4
69a569a669a769a869a969aa69ab69ac69ad69ae69af69b069b169b269b3
69b469b569b669b769b869b969ba69bb69bc69bd69be69bf69c069c169c2
69c369c469c569c669c769c869c969ca69cb69cc69cd69ce69cf69d069d1
69d269d369d469d569d669d769d869d969da69db69dc69dd69de69df69e0
69e169e269e369e469e569e669e769e869e969ea69eb69ec69ed69ee69ef
69f069f169f269f369f469f569f669f769f869f969fa69fb69fc69fd69fe
69ff6a006a016a026a036a046a056a066a076a086a096a0a6a0b6a0c6a0d
6a0e6a0f6a106a116a126a136a146a156a166a176a186a196a1a6a1b6a1c
6a1d6a1e6a1f6a206a216a226a236a246a256a266a276a286a296a2a6a2b
6a2c6a2d6a2e6a2f6a306a316a326a336a346a356a366a376a386a396a3a
6a3b6a3c6a3d6a3e6a3f6a406a416a426a436a446a456a466a476a486a49
6a4a6a4b6a4c6a4d6a4e6a4f6a506a516a526a536a546a556a566a576a58
6a596a5a6a5b6a5c6a5d6a5e6a5f6a606a616a626a636a646a656a666a67
6a686a696a6a6a6b6a6c6a6d6a6e6a6f6a706a716a726a736a746a756a76
6a776a786a796a7a6a7b6a7c6a7d6a7e6a7f6a806a816a826a836a846a85
6a866a876a886a896a8a6a8b6a8c6a8d6a8e6a8f6a906a916a926a936a94
6a956a966a976a986a996a9a6a9b6a9c6a9d6a9e6a9f6aa06aa16aa26aa3
6aa46aa56aa66aa76aa86aa96aaa6aab6aac6aad6aae6aaf6ab06ab16ab2
6ab36ab46ab56ab66ab76ab86ab96aba6abb6abc6abd6abe6abf6ac06ac1
6ac26ac36ac46ac56ac66ac76ac86ac96aca6acb6acc6acd6ace6acf6ad0
6ad16ad26ad36ad46ad56ad66ad76ad86ad96ada6adb6adc6add6ade6adf
6ae06ae16ae26ae36ae46ae56ae66ae76ae86ae96aea6aeb6aec6aed6aee
6aef6af06af16af26af36af46af56af66af76af86af96afa6afb6afc6afd
6afe6aff6b006b016b026b036b046b056b066b076b086b096b0a6b0b6b0c
6b0d6b0e6b0f6b106b116b126b136b146b156b166b176b186b196b1a6b1b
6b1c6b1d6b1e6b1f6b206b216b226b236b246b256b266b276b286b296b2a
6b2b6b2c6b2d6b2e6b2f6b306b316b326b336b346b356b366b376b386b39
6b3a6b3b6b3c6b3d6b3e6b3f6b406b416b426b436b446b456b466b476b48
6b496b4a6b4b6b4c6b4d6b4e6b4f6b506b516b526b536b546b556b566b57
6b586b596b5a6b5b6b5c6b5d6b5e6b5f6b606b616b626b636b646b656b66
6b676b686b696b6a6b6b6b6c6b6d6b6e6b6f6b706b716b726b736b746b75
6b766b776b786b796b7a6b7b6b7c6b7d6b7e6b7f6b806b816b826b836b84
6b856b866b876b886b896b8a6b8b6b8c6b8d6b8e6b8f6b906b916b926b93
6b946b956b966b976b986b996b9a6b9b6b9c6b9d6b9e6b9f6ba06ba16ba2
6ba36ba46ba56ba66ba76ba86ba96baa6bab6bac6bad6bae6baf6bb06bb1
6bb26bb36bb46bb56bb66bb76bb86bb96bba6bbb6bbc6bbd6bbe6bbf6bc0
6bc16bc26bc36bc46bc56bc66bc76bc86bc96bca6bcb6bcc6bcd6bce6bcf
6bd06bd16bd26bd36bd46bd56bd66bd76bd86bd96bda6bdb6bdc6bdd6bde
6bdf6be06be16be26be36be46be56be66be76be86be96bea6beb6bec6bed
6bee6bef6bf06bf16bf26bf36bf46bf56bf66bf76bf86bf96bfa6bfb6bfc
6bfd6bfe6bff6c006c016c026c036c046c056c066c076c086c096c0a6c0b
6c0c6c0d6c0e6c0f6c106c116c126c136c146c156c166c176c186c196c1a
6c1b6c1c6c1d6c1e6c1f6c206c216c226c236c246c256c266c276c286c29
6c2a6c2b6c2c6c2d6c2e6c2f6c306c316c326c336c346c356c366c376c38
6c396c3a6c3b6c3c6c3d6c3e6c3f6c406c416c426c436c446c456c466c47
6c486c496c4a6c4b6c4c6c4d6c4e6c4f6c506c516c526c536c546c556c56
6c576c586c596c5a6c5b6c5c6c5d6c5e6c5f6c606c616c626c636c646c65
6c666c676c686c696c6a6c6b6c6c6c6d6c6e6c6f6c706c716c726c736c74
6c756c766c776c786c796c7a6c7b6c7c6c7d6c7e6c7f6c806c816c826c83
6c846c856c866c876c886c896c8a6c8b6c8c6c8d6c8e6c8f6c906c916c92
6c936c946c956c966c976c986c996c9a6c9b6c9c6c9d6c9e6c9f6ca06ca1
6ca26ca36ca46ca56ca66ca76ca86ca96caa6cab6cac6cad6cae6caf6cb0
6cb16cb26cb36cb46cb56cb66cb76cb86cb96cba6cbb6cbc6cbd6cbe6cbf
6cc06cc16cc26cc36cc46cc56cc66cc76cc86cc96cca6ccb6ccc6ccd6cce
6ccf6cd06cd16cd26cd36cd46cd56cd66cd76cd86cd96cda6cdb6cdc6cdd
6cde6cdf6ce06ce16ce26ce36ce46ce56ce66ce76ce86ce96cea6ceb6cec
6ced6cee6cef6cf06cf16cf26cf36cf46cf56cf66cf76cf86cf96cfa6cfb
6cfc6cfd6cfe6cff6d006d016d026d036d046d056d066d076d086d096d0a
6d0b6d0c6d0d6d0e6d0f6d106d116d126d136d146d156d166d176d186d19
6d1a6d1b6d1c6d1d6d1e6d1f6d206d216d226d236d246d256d266d276d28
6d296d2a6d2b6d2c6d2d6d2e6d2f6d306d316d326d336d346d356d366d37
6d386d396d3a6d3b6d3c6d3d6d3e6d3f6d406d416d426d436d446d456d46
6d476d486d496d4a6d4b6d4c6d4d6d4e6d4f6d506d516d526d536d546d55
6d566d576d586d596d5a6d5b6d5c6d5d6d5e6d5f6d606d616d626d636d64
6d656d666d676d686d696d6a6d6b6d6c6d6d6d6e6d6f6d706d716d726d73
6d746d756d766d776d786d796d7a6d7b6d7c6d7d6d7e6d7f6d806d816d82
6d836d846d856d866d876d886d896d8a6d8b6d8c6d8d6d8e6d8f6d906d91
6d926d936d946d956d966d976d986d996d9a6d9b6d9c6d9d6d9e6d9f6da0
6da16da26da36da46da56da66da76da86da96daa6dab6dac6dad6dae6daf
6db06db16db26db36db46db56db66db76db86db96dba6dbb6dbc6dbd6dbe
6dbf6dc06dc16dc26dc36dc46dc56dc66dc76dc86dc96dca6dcb6dcc6dcd
6dce6dcf6dd06dd16dd26dd36dd46dd56dd66dd76dd86dd96dda6ddb6ddc
6ddd6dde6ddf6de06de16de26de36de46de56de66de76de86de96dea6deb
6dec6ded6dee6def6df06df16df26df36df46df56df66df76df86df96dfa
6dfb6dfc6dfd6dfe6dff6e006e016e026e036e046e056e066e076e086e09
6e0a6e0b6e0c6e0d6e0e6e0f6e106e116e126e136e146e156e166e176e18
6e196e1a6e1b6e1c6e1d6e1e6e1f6e206e216e226e236e246e256e266e27
6e286e296e2a6e2b6e2c6e2d6e2e6e2f6e306e316e326e336e346e356e36
6e376e386e396e3a6e3b6e3c6e3d6e3e6e3f6e406e416e426e436e446e45
6e466e476e486e496e4a6e4b6e4c6e4d6e4e6e4f6e506e516e526e536e54
6e556e566e576e586e596e5a6e5b6e5c6e5d6e5e6e5f6e606e616e626e63
6e646e656e666e676e686e696e6a6e6b6e6c6e6d6e6e6e6f6e706e716e72
6e736e746e756e766e776e786e796e7a6e7b6e7c6e7d6e7e6e7f6e806e81
6e826e836e846e856e866e876e886e896e8a6e8b6e8c6e8d6e8e6e8f6e90
6e916e926e936e946e956e966e976e986e996e9a6e9b6e9c6e9d6e9e6e9f
6ea06ea16ea26ea36ea46ea56ea66ea76ea86ea96eaa6eab6eac6ead6eae
6eaf6eb06eb16eb26eb36eb46eb56eb66eb76eb86eb96eba6ebb6ebc6ebd
6ebe6ebf6ec06ec16ec26ec36ec46ec56ec66ec76ec86ec96eca6ecb6ecc
6ecd6ece6ecf6ed06ed16ed26ed36ed46ed56ed66ed76ed86ed96eda6edb
6edc6edd6ede6edf6ee06ee16ee26ee36ee46ee56ee66ee76ee86ee96eea
6eeb6eec6eed6eee6eef6ef06ef16ef26ef36ef46ef56ef66ef76ef86ef9
6efa6efb6efc6efd6efe6eff6f006f016f026f036f046f056f066f076f08
6f096f0a6f0b6f0c6f0d6f0e6f0f6f106f116f126f136f146f156f166f17
6f186f196f1a6f1b6f1c6f1d6f1e6f1f6f206f216f226f236f246f256f26
6f276f286f296f2a6f2b6f2c6f2d6f2e6f2f6f306f316f326f336f346f35
6f366f376f386f396f3a6f3b6f3c6f3d6f3e6f3f6f406f416f426f436f44
6f456f466f476f486f496f4a6f4b6f4c6f4d6f4e6f4f6f506f516f526f53
6f546f556f566f576f586f596f5a6f5b6f5c6f5d6f5e6f5f6f606f616f62
6f636f646f656f666f676f686f696f6a6f6b6f6c6f6d6f6e6f6f6f706f71
6f726f736f746f756f766f776f786f796f7a6f7b6f7c6f7d6f7e6f7f6f80
6f816f826f836f846f856f866f876f886f896f8a6f8b6f8c6f8d6f8e6f8f
6f906f916f926f936f946f956f966f976f986f996f9a6f9b6f9c6f9d6f9e
6f9f6fa06fa16fa26fa36fa46fa56fa66fa76fa86fa96faa6fab6fac6fad
6fae6faf6fb06fb16fb26fb36fb46fb56fb66fb76fb86fb96fba6fbb6fbc
6fbd6fbe6fbf6fc06fc16fc26fc36fc46fc56fc66fc76fc86fc96fca6fcb
6fcc6fcd6fce6fcf6fd06fd16fd26fd36fd46fd56fd66fd76fd86fd96fda
6fdb6fdc6fdd6fde6fdf6fe06fe16fe26fe36fe46fe56fe66fe76fe86fe9
6fea6feb6fec6fed6fee6fef6ff06ff16ff26ff36ff46ff56ff66ff76ff8
6ff96ffa6ffb6ffc6ffd6ffe6fff70007001700270037004700570067007
70087009700a700b700c700d700e700f7010701170127013701470157016
701770187019701a701b701c701d701e701f702070217022702370247025
7026702770287029702a702b702c702d702e702f70307031703270337034
70357036703770387039703a703b703c703d703e703f7040704170427043
704470457046704770487049704a704b704c704d704e704f705070517052
7053705470557056705770587059>]def
/sfnts
[<00010000000a000a000a000a4f532f3250d28b4e000000ac000000606376
7420072903f00000010c000002be6670676d4aa192e8000003cc0000000d
68656164e34ba941000003dc000000366868656102000494000004140000
0024686d747806000105000004380000e8226d61787071e7017f0000ec5c
000000206e616d65744e3db80000ec7c000006607072657005dc4fcc0000
f2dc000000b2676469720000000000000000000000000003008001900005
000800800080000000100080008000000080000c00410000020106000301
0101010100000003288f000000000006000000005a59454300400021fe63
00dcffdc002400dc00240004000100000000007400af000000200001ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
00ab0002007000020004fffeffdfffff00060008000a000c000e00100012
001400160018001a001c001e000e0010ffff00060008000a000c000e0010
0012001400160018001a001a001cffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffff001e001e00c90000001c001c
0002ffea00550033003800c1000a00400037003d0032003c00dcffdd0057
004d000b001f000b001f00920037007a0070006c006f00200020001a0016
0006000800060008000f0000b0282c4b525845441b2121592d0000000001
000000050a3d35dabd485f0f3cf5000b010000000000b798428000000000
cb921dccfffeffdb010000dc0000000c00020000000000000001000000dc
ffdc00240100fffe000001000001000000000000000000000000000003b7
00>
<010000000000000000800000000000000080003100800012000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000008000020000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000080000f000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000080000800000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010000520100005700000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<00010000705a002f00020000000000010000002f00290000016101200000
00000000001e016e00010000000000000027000000010000000000010006
002700010000000000020007002d00010000000000030006002700010000
00000004000600270001000000000005000c003400010000000000060006
00270001000000000007002c00400003000104090000004e006c00030001
04090001000c00ee0003000104090002000e00fa0003000104090003000c
00ee0003000104090004000c00ee00030001040900050018010800030001
04090006000c00ee000300010409000700580120000300010409000d02aa
0178000300010409000e0052042200030001080400000082006c00030001
080400010004047400030001080400020004047800030001080400030004
047400030001080400040004047400030001080400050018010800030001
08040006000404740003000108040007005801200003000108040008003e
047c0003000108040009003e047c000300010804000b003804ba00030001
0804000c003804baa920436f70797269676874205a484f4e47594920456c
656374726f6e696320436f2e203230303153696d53756e526567756c6172
56657273696f6e20352e303454726164656d61726b206f66205a484f4e47
594920456c656374726f6e696320436f2e2c204265696a696e6700a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b300200530069006d00530075006e0052006500670075006c0061
007200560065007200730069006f006e00200035002e0030003400540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e00670059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e007400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
00200062007900200074006800650020006c006900630065006e00730065
0020007400650072006d007300200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0066
006f006e007400735b8b4f535e3889c4004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e411a01110110003200280110010e0028
0028010f010e00280028010c010d00460028010d010e00280028010e010d
00180028010c010db346285001b801ff858d001db0324b5258b0801d59b8
01064568b801062344b801044568b801042344b801054568b801044560b8
01052344b801024568b801044560b801022344b801034568b801024560b8
01032344b801004568b801044560b801002344b801014568b801004560b8
01012344012b2b2b2b2b2b2b000000>]def 
/GlyphDirectory 16 dict def
CIDFontName currentdict end /CIDFont defineresource pop
ct_GlyphDirProcs begin
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
949 <00010057004f00a6005e0003000037353315574f4f0f0f00> |

0 <>  |
!
end
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H /Identity-H 0 [/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H] ct_ComposeFont pop
end end
%ADOEndSubsetFont
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
180.71 143 mo
(\003\265)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
180.71 143 mo
(\003\265) false chp
.0095238 lw
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
221.42 143.72 mo
(\003\265)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
221.42 143.72 mo
(\003\265) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
257.24 143.72 mo
(\003\265)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
257.24 143.72 mo
(\003\265) false chp
@
%ADOBeginSubsetFont: LJDIOO+#cb#ce#cc#e5-GBK-EUC-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
ct_GlyphDirProcs begin
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H 2 GetGlyphDirectory
948 <00010052002900ae0083000b000037353315331523152335233578102626
10265d26260e26260e00> |
!
end
end end
%ADOEndSubsetFont
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
299.76 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
299.76 143.72 mo
(\003\264) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
342.28 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
342.28 143.72 mo
(\003\264) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
384.8 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
384.8 143.72 mo
(\003\264) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
420.63 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
420.63 143.72 mo
(\003\264) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
462.36 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
462.36 143.72 mo
(\003\264) false chp
@
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
504.88 143.72 mo
(\003\264)sh
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [23.9998 0 0 -23.9998 0 0 ]msf
504.88 143.72 mo
(\003\264) false chp
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H-Identity-H uf
/LJDIOO+#cb#ce#cc#e5-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
